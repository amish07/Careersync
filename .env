<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>
      Interview Copilot Pro - Advanced AI Interview Platform
    </title>

    <!-- External Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script>

    <style>
      @import url("https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap");

      :root {
        --primary-color: #2563eb;
        --primary-light: #3b82f6;
        --secondary-color: #8b5cf6;
        --accent-color: #10b981;
        --warning-color: #f59e0b;
        --danger-color: #ef4444;
        --bg-primary: #ffffff;
        --bg-secondary: #f8fafc;
        --bg-tertiary: #f1f5f9;
        --text-primary: #1e293b;
        --text-secondary: #64748b;
        --text-light: #94a3b8;
        --border-color: #e2e8f0;
        --border-light: #f1f5f9;
        --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
        --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1),
          0 2px 4px -2px rgb(0 0 0 / 0.1);
        --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1),
          0 4px 6px -4px rgb(0 0 0 / 0.1);
        --shadow-xl: 0 20px 25px -5px rgb(0 0 0 / 0.1),
          0 8px 10px -6px rgb(0 0 0 / 0.1);
        --radius-sm: 8px;
        --radius-md: 12px;
        --radius-lg: 16px;
        --radius-xl: 24px;
      }

      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI",
          sans-serif;
        background: var(--bg-secondary);
        color: var(--text-primary);
        line-height: 1.6;
        min-height: 100vh;
        overflow-x: hidden;
      }

      /* Mobile First - Sidebar Navigation */
      .mobile-nav {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 60px;
        background: var(--bg-primary);
        border-bottom: 1px solid var(--border-light);
        z-index: 1000;
        align-items: center;
        justify-content: space-between;
        padding: 0 20px;
      }

      .mobile-nav h1 {
        font-size: 1.2rem;
        font-weight: 600;
      }

      .menu-toggle {
        width: 40px;
        height: 40px;
        border: none;
        background: none;
        cursor: pointer;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        gap: 3px;
      }

      .menu-toggle span {
        width: 20px;
        height: 2px;
        background: var(--text-primary);
        transition: all 0.3s ease;
      }

      .sidebar {
        position: fixed;
        left: -280px;
        top: 0;
        width: 280px;
        height: 100vh;
        background: var(--bg-primary);
        border-right: 1px solid var(--border-light);
        z-index: 999;
        transition: left 0.3s ease;
        overflow-y: auto;
      }

      .sidebar.active {
        left: 0;
      }

      .sidebar-header {
        padding: 20px;
        border-bottom: 1px solid var(--border-light);
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
        color: white;
      }

      .sidebar-nav {
        padding: 20px 0;
      }

      .sidebar-nav-item {
        display: flex;
        align-items: center;
        padding: 12px 20px;
        color: var(--text-secondary);
        text-decoration: none;
        transition: all 0.2s ease;
        border-left: 3px solid transparent;
        gap: 12px;
      }

      .sidebar-nav-item:hover, .sidebar-nav-item.active {
        background: var(--bg-tertiary);
        color: var(--primary-color);
        border-left-color: var(--primary-color);
      }

      /* Animated background */
      body::before {
        content: "";
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        opacity: 0.03;
        z-index: -2;
      }

      .container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
        min-height: calc(100vh - 120px);
      }

      /* API Status Indicator */
      .api-status {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        background: var(--bg-primary);
        border-radius: var(--radius-md);
        padding: 8px 16px;
        box-shadow: var(--shadow-md);
        border: 1px solid var(--border-light);
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.85rem;
      }

      .status-indicator {
        width: 8px;
        height: 8px;
        border-radius: 50%;
        background: #ef4444;
        animation: pulse 2s infinite;
      }

      .status-indicator.online {
        background: var(--accent-color);
        animation: none;
      }

      /* Enhanced Header */
      .header {
        text-align: center;
        margin-bottom: 40px;
        padding: 60px 40px;
        background: var(--bg-primary);
        border-radius: var(--radius-xl);
        box-shadow: var(--shadow-lg);
        position: relative;
        overflow: hidden;
        border: 1px solid var(--border-light);
      }

      .header::before {
        content: "";
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: conic-gradient(
          from 0deg at 50% 50%,
          transparent,
          rgba(102, 126, 234, 0.05),
          transparent
        );
        animation: rotate 20s linear infinite;
      }

      @keyframes rotate {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }

      .header-content {
        position: relative;
        z-index: 1;
      }

      .header h1 {
        font-size: 3rem;
        font-weight: 700;
        margin-bottom: 16px;
        background: linear-gradient(
          135deg,
          var(--primary-color) 0%,
          var(--secondary-color) 100%
        );
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        background-clip: text;
        animation: slideInUp 0.8s ease-out;
      }

      .header p {
        font-size: 1.2rem;
        color: var(--text-secondary);
        animation: slideInUp 0.8s ease-out 0.2s both;
      }

      @keyframes slideInUp {
        from {
          opacity: 0;
          transform: translateY(30px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      /* Navigation */
      .nav-container {
        background: var(--bg-primary);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-md);
        padding: 8px;
        margin-bottom: 30px;
        border: 1px solid var(--border-light);
        overflow-x: auto;
      }

      .nav-tabs {
        display: flex;
        gap: 4px;
        min-width: 800px;
      }

      .nav-tab {
        flex: 1;
        padding: 16px 24px;
        background: transparent;
        border: none;
        border-radius: var(--radius-md);
        font-size: 1rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s ease;
        color: var(--text-secondary);
        position: relative;
        overflow: hidden;
        white-space: nowrap;
      }

      .nav-tab.active {
        background: linear-gradient(
          135deg,
          var(--primary-color) 0%,
          var(--secondary-color) 100%
        );
        color: white;
        box-shadow: var(--shadow-sm);
        transform: translateY(-2px);
      }

      .nav-tab:hover:not(.active) {
        background: var(--bg-tertiary);
        transform: translateY(-1px);
      }

      /* Page Sections */
      .page-section {
        display: none;
        animation: fadeIn 0.5s ease;
      }

      .page-section.active {
        display: block;
      }

      @keyframes fadeIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .card {
        background: var(--bg-primary);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-md);
        padding: 32px;
        border: 1px solid var(--border-light);
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        position: relative;
        overflow: hidden;
        margin-bottom: 24px;
      }

      .card:hover {
        transform: translateY(-4px);
        box-shadow: var(--shadow-xl);
        border-color: var(--border-color);
      }

      .card-title {
        font-size: 1.4rem;
        font-weight: 600;
        margin-bottom: 24px;
        display: flex;
        align-items: center;
        gap: 12px;
        color: var(--text-primary);
      }

      /* Video Interview Components */
      .video-container {
        position: relative;
        background: #000;
        border-radius: var(--radius-lg);
        overflow: hidden;
        margin-bottom: 20px;
      }

      .video-stream {
        width: 100%;
        height: 300px;
        object-fit: cover;
        background: #1a1a1a;
        border-radius: var(--radius-lg);
      }

      .video-controls {
        position: absolute;
        bottom: 20px;
        left: 50%;
        transform: translateX(-50%);
        display: flex;
        gap: 12px;
        align-items: center;
        background: rgba(0, 0, 0, 0.8);
        padding: 12px 20px;
        border-radius: var(--radius-xl);
        backdrop-filter: blur(10px);
      }

      .video-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        background: var(--primary-color);
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
      }

      .video-btn:hover {
        background: var(--primary-light);
        transform: scale(1.1);
      }

      .video-btn.recording {
        background: var(--danger-color);
        animation: pulse 2s infinite;
      }

      .confidence-meter {
        position: absolute;
        top: 20px;
        right: 20px;
        background: rgba(0, 0, 0, 0.8);
        color: white;
        padding: 10px 16px;
        border-radius: var(--radius-md);
        backdrop-filter: blur(10px);
        min-width: 120px;
        text-align: center;
      }

      .confidence-score {
        font-size: 1.5rem;
        font-weight: 700;
        color: var(--accent-color);
      }

      .behavioral-indicators {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 16px;
        margin-top: 20px;
      }

      .indicator-card {
        background: var(--bg-tertiary);
        padding: 16px;
        border-radius: var(--radius-md);
        text-align: center;
        border: 1px solid var(--border-light);
      }

      .indicator-value {
        font-size: 1.2rem;
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 4px;
      }

      .indicator-label {
        font-size: 0.8rem;
        color: var(--text-secondary);
      }

      /* Voice Controls */
      .voice-controls {
        position: relative;
        display: flex;
        align-items: center;
        gap: 8px;
      }

      .voice-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        border: none;
        background: var(--secondary-color);
        color: white;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all 0.3s ease;
      }

      .voice-btn:hover {
        background: var(--primary-color);
        transform: scale(1.1);
      }

      .voice-btn.active {
        background: var(--danger-color);
        animation: pulse 2s infinite;
      }

      /* Progress Dashboard */
      .dashboard-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 24px;
        margin-bottom: 32px;
      }

      .metric-card {
        background: var(--bg-primary);
        border-radius: var(--radius-lg);
        padding: 24px;
        border: 1px solid var(--border-light);
        text-align: center;
        position: relative;
        overflow: hidden;
      }

      .metric-card::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(90deg, var(--primary-color), var(--secondary-color));
      }

      .metric-value {
        font-size: 2rem;
        font-weight: 700;
        color: var(--primary-color);
        margin-bottom: 8px;
      }

      .metric-label {
        color: var(--text-secondary);
        font-weight: 500;
      }

      .metric-trend {
        font-size: 0.8rem;
        color: var(--accent-color);
        margin-top: 4px;
      }

      /* Session History */
      .session-item {
        background: var(--bg-primary);
        border: 1px solid var(--border-light);
        border-radius: var(--radius-lg);
        padding: 20px;
        margin-bottom: 16px;
        transition: all 0.3s ease;
        cursor: pointer;
      }

      .session-item:hover {
        transform: translateX(8px);
        box-shadow: var(--shadow-md);
      }

      .session-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 12px;
      }

      .session-company {
        font-weight: 600;
        color: var(--primary-color);
      }

      .session-date {
        font-size: 0.85rem;
        color: var(--text-light);
      }

      .session-stats {
        display: flex;
        gap: 20px;
        margin-top: 12px;
      }

      .session-stat {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 4px;
      }

      .session-stat-value {
        font-weight: 600;
        color: var(--text-primary);
      }

      .session-stat-label {
        font-size: 0.75rem;
        color: var(--text-light);
      }

      /* ATS Optimization */
      .ats-score {
        background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%);
        border: 1px solid #a7f3d0;
        border-radius: var(--radius-lg);
        padding: 24px;
        text-align: center;
        margin-bottom: 20px;
      }

      .ats-percentage {
        font-size: 3rem;
        font-weight: 700;
        color: var(--accent-color);
        margin-bottom: 8px;
      }

      .ats-label {
        color: #065f46;
        font-weight: 500;
      }

      /* Testimonials */
      .testimonials-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 24px;
        margin: 40px 0;
      }

      .testimonial-card {
        background: var(--bg-primary);
        border-radius: var(--radius-lg);
        padding: 32px;
        border: 1px solid var(--border-light);
        position: relative;
      }

      .testimonial-quote {
        font-style: italic;
        color: var(--text-secondary);
        margin-bottom: 20px;
        line-height: 1.6;
      }

      .testimonial-author {
        display: flex;
        align-items: center;
        gap: 12px;
      }

      .testimonial-avatar {
        width: 48px;
        height: 48px;
        border-radius: 50%;
        background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: 600;
      }

      .testimonial-info h4 {
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 4px;
      }

      .testimonial-info p {
        font-size: 0.9rem;
        color: var(--text-light);
      }

      /* Text Areas */
      .text-area {
        width: 100%;
        min-height: 200px;
        padding: 20px;
        border: 2px dashed var(--border-color);
        border-radius: var(--radius-lg);
        font-size: 0.95rem;
        line-height: 1.6;
        resize: vertical;
        background: var(--bg-tertiary);
        color: var(--text-primary);
        font-family: inherit;
        transition: all 0.3s ease;
      }

      .text-area:focus {
        outline: none;
        border-color: var(--primary-color);
        background: var(--bg-primary);
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
      }

      /* Buttons */
      .btn {
        background: linear-gradient(
          135deg,
          var(--primary-color) 0%,
          var(--secondary-color) 100%
        );
        color: white;
        border: none;
        padding: 14px 24px;
        border-radius: var(--radius-md);
        cursor: pointer;
        font-size: 0.95rem;
        font-weight: 500;
        transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
        position: relative;
        overflow: hidden;
        font-family: inherit;
      }

      .btn:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
      }

      .btn:disabled {
        opacity: 0.5;
        cursor: not-allowed;
        transform: none;
      }

      .btn-secondary {
        background: var(--bg-primary);
        color: var(--text-primary);
        border: 1px solid var(--border-color);
      }

      /* Chat Interface */
      .chat-container {
        display: flex;
        flex-direction: column;
        height: 500px;
        background: var(--bg-primary);
        border-radius: var(--radius-lg);
        box-shadow: var(--shadow-md);
        border: 1px solid var(--border-light);
        overflow: hidden;
      }

      .chat-header {
        padding: 20px 24px;
        background: var(--bg-tertiary);
        border-bottom: 1px solid var(--border-light);
        display: flex;
        align-items: center;
        justify-content: space-between;
      }

      .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 24px;
        background: var(--bg-tertiary);
      }

      .message {
        margin-bottom: 20px;
        padding: 16px 20px;
        border-radius: var(--radius-lg);
        max-width: 85%;
        animation: messageSlideIn 0.4s ease;
        position: relative;
      }

      @keyframes messageSlideIn {
        from {
          opacity: 0;
          transform: translateY(20px);
        }
        to {
          opacity: 1;
          transform: translateY(0);
        }
      }

      .message.user {
        background: linear-gradient(
          135deg,
          var(--primary-color) 0%,
          var(--secondary-color) 100%
        );
        color: white;
        margin-left: auto;
        margin-right: 0;
        border-bottom-right-radius: 8px;
      }

      .message.assistant {
        background: var(--bg-primary);
        border: 1px solid var(--border-light);
        margin-right: auto;
        margin-left: 0;
        border-bottom-left-radius: 8px;
        color: var(--text-primary);
      }

      .chat-input-container {
        padding: 20px 24px;
        background: var(--bg-primary);
        border-top: 1px solid var(--border-light);
        display: flex;
        gap: 12px;
        align-items: flex-end;
      }

      .chat-input {
        flex: 1;
        padding: 12px 16px;
        border: 1px solid var(--border-color);
        border-radius: var(--radius-md);
        font-size: 0.95rem;
        resize: none;
        min-height: 44px;
        max-height: 120px;
        line-height: 1.5;
        background: var(--bg-tertiary);
        color: var(--text-primary);
        font-family: inherit;
        transition: all 0.3s ease;
      }

      .chat-input:focus {
        outline: none;
        border-color: var(--primary-color);
        background: var(--bg-primary);
        box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.1);
      }

      /* Loading Animation */
      .loading {
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 12px;
        color: var(--primary-color);
        padding: 40px;
      }

      .loading-spinner {
        width: 20px;
        height: 20px;
        border: 2px solid var(--border-light);
        border-top: 2px solid var(--primary-color);
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }

      /* Toast Notification */
      .toast {
        position: fixed;
        top: 80px;
        right: 20px;
        background: var(--bg-primary);
        border: 1px solid var(--border-light);
        border-radius: var(--radius-md);
        padding: 16px 20px;
        box-shadow: var(--shadow-lg);
        z-index: 1001;
        animation: slideInRight 0.3s ease;
        max-width: 300px;
      }

      .toast.success { border-left: 4px solid var(--accent-color); }
      .toast.error { border-left: 4px solid var(--danger-color); }
      .toast.info { border-left: 4px solid var(--primary-color); }

      /* Enhanced Footer */
      .footer {
        background: linear-gradient(135deg, var(--bg-primary) 0%, var(--bg-tertiary) 100%);
        border-top: 1px solid var(--border-light);
        padding: 60px 0 40px;
        margin-top: 80px;
        position: relative;
        overflow: hidden;
      }

      .footer-content {
        max-width: 1400px;
        margin: 0 auto;
        padding: 0 20px;
        text-align: center;
      }

      .footer-main {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 40px;
        margin-bottom: 40px;
      }

      .footer-section h4 {
        font-size: 1.1rem;
        font-weight: 600;
        margin-bottom: 16px;
        color: var(--text-primary);
      }

      .footer-section p,
      .footer-section a {
        color: var(--text-secondary);
        text-decoration: none;
        line-height: 1.6;
        font-size: 0.95rem;
        transition: color 0.2s ease;
      }

      .footer-section a:hover {
        color: var(--primary-color);
      }

      .footer-section ul {
        list-style: none;
      }

      .footer-section li {
        margin-bottom: 8px;
      }

      .footer-creator {
        border-top: 1px solid var(--border-light);
        padding-top: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 16px;
        flex-wrap: wrap;
      }

      .creator-badge {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 12px 20px;
        background: linear-gradient(135deg, var(--primary-color) 0%, var(--secondary-color) 100%);
        color: white;
        border-radius: var(--radius-xl);
        text-decoration: none;
        font-weight: 500;
        transition: all 0.3s ease;
      }

      .creator-badge:hover {
        transform: translateY(-2px);
        box-shadow: var(--shadow-lg);
      }

      /* Responsive Design */
      @media (max-width: 768px) {
        .mobile-nav {
          display: flex;
        }
        
        body {
          padding-top: 60px;
        }
        
        .header h1 {
          font-size: 2.2rem;
        }

        .container {
          padding: 16px;
        }

        .nav-container {
          display: none;
        }

        .dashboard-grid {
          grid-template-columns: 1fr;
        }

        .testimonials-grid {
          grid-template-columns: 1fr;
        }

        .footer-main {
          grid-template-columns: 1fr;
          gap: 32px;
        }

        .api-status {
          position: relative;
          top: auto;
          right: auto;
          margin-bottom: 20px;
          display: inline-flex;
        }

        .chat-container {
          height: 400px;
        }

        .video-stream {
          height: 200px;
        }
      }

      @keyframes pulse {
        0%, 100% { opacity: 1; }
        50% { opacity: 0.5; }
      }

      @keyframes slideInRight {
        from {
          opacity: 0;
          transform: translateX(100%);
        }
        to {
          opacity: 1;
          transform: translateX(0);
        }
      }
    </style>
  </head>
  <body>
    <!-- Mobile Navigation -->
    <div class="mobile-nav" id="mobileNav">
      <h1>Interview Copilot Pro</h1>
      <button class="menu-toggle" onclick="toggleSidebar()">
        <span></span>
        <span></span>
        <span></span>
      </button>
    </div>

    <!-- Sidebar Navigation -->
    <div class="sidebar" id="sidebar">
      <div class="sidebar-header">
        <h2>Interview Copilot Pro</h2>
        <p>AI-Powered Career Assistant</p>
      </div>
      <nav class="sidebar-nav">
        <a href="#" class="sidebar-nav-item active" onclick="showSection('home')">
          🏠 Dashboard
        </a>
        <a href="#" class="sidebar-nav-item" onclick="showSection('video-interview')">
          📹 Video Interview
        </a>
        <a href="#" class="sidebar-nav-item" onclick="showSection('resume-analysis')">
          📋 Resume Analysis
        </a>
        <a href="#" class="sidebar-nav-item" onclick="showSection('interview-prep')">
          🎯 Interview Prep
        </a>
        <a href="#" class="sidebar-nav-item" onclick="showSection('progress-dashboard')">
          📊 Progress Dashboard
        </a>
        <a href="#" class="sidebar-nav-item" onclick="showSection('ai-insights')">
          🧠 AI Insights
        </a>
        <a href="#" class="sidebar-nav-item" onclick="showSection('resume-builder')">
          📝 Resume Builder
        </a>
        <a href="#" class="sidebar-nav-item" onclick="showSection('career-coach')">
          🚀 Career Coach
        </a>
        <a href="#" class="sidebar-nav-item" onclick="showSection('testimonials')">
          💬 Testimonials
        </a>
      </nav>
    </div>

    <!-- API Status Indicator -->
    <div class="api-status" id="apiStatus">
      <div class="status-indicator" id="statusIndicator"></div>
      <span id="statusText">Connecting...</span>
    </div>

    <div class="container">
      <div class="header">
        <div class="header-content">
          <h1>Interview Copilot Pro</h1>
          <p>Advanced AI-powered interview platform with video simulation and behavioral analysis</p>
        </div>
      </div>

      <!-- Desktop Navigation -->
      <div class="nav-container">
        <div class="nav-tabs">
          <button class="nav-tab active" onclick="showSection('home')">
            🏠 Dashboard
          </button>
          <button class="nav-tab" onclick="showSection('video-interview')">
            📹 Video Interview
          </button>
          <button class="nav-tab" onclick="showSection('resume-analysis')">
            📋 Resume Analysis
          </button>
          <button class="nav-tab" onclick="showSection('interview-prep')">
            🎯 Interview Prep
          </button>
          <button class="nav-tab" onclick="showSection('progress-dashboard')">
            📊 Progress
          </button>
          <button class="nav-tab" onclick="showSection('ai-insights')">
            🧠 AI Insights
          </button>
          <button class="nav-tab" onclick="showSection('resume-builder')">
            📝 Resume Builder
          </button>
          <button class="nav-tab" onclick="showSection('career-coach')">
            🚀 Career Coach
          </button>
        </div>
      </div>

      <!-- Dashboard Section -->
      <div id="home" class="page-section active">
        <div class="dashboard-grid">
          <div class="metric-card">
            <div class="metric-value" id="dashboardInterviews">0</div>
            <div class="metric-label">Practice Sessions</div>
            <div class="metric-trend" id="interviewTrend">Track your progress</div>
          </div>
          <div class="metric-card">
            <div class="metric-value" id="dashboardConfidence">--</div>
            <div class="metric-label">Confidence Score</div>
            <div class="metric-trend" id="confidenceTrend">AI-Analyzed</div>
          </div>
          <div class="metric-card">
            <div class="metric-value" id="dashboardSkills">--</div>
            <div class="metric-label">Skill Match</div>
            <div class="metric-trend" id="skillsTrend">Resume Optimization</div>
          </div>
          <div class="metric-card">
            <div class="metric-value" id="dashboardReadiness">--</div>
            <div class="metric-label">Interview Readiness</div>
            <div class="metric-trend" id="readinessTrend">Overall Assessment</div>
          </div>
        </div>

        <div class="card">
          <div class="card-title">
            <span>🚀</span>
            Quick Actions
          </div>
          <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px;">
            <button class="btn" onclick="showSection('video-interview')">
              📹 Start Video Interview
            </button>
            <button class="btn" onclick="showSection('resume-analysis')">
              📋 Analyze Resume
            </button>
            <button class="btn" onclick="showSection('career-coach')">
              🧠 Get AI Career Advice
            </button>
            <button class="btn" onclick="showSection('progress-dashboard')">
              📊 View Progress
            </button>
          </div>
        </div>

        <div class="card">
          <div class="card-title">
            <span>📈</span>
            Recent Activity
          </div>
          <div id="recentActivity">
            <p style="color: var(--text-secondary); text-align: center; padding: 40px;">
              Start your first interview practice session to see your activity here.
            </p>
          </div>
        </div>
      </div>

      <!-- Video Interview Section -->
      <div id="video-interview" class="page-section">
        <div class="card">
          <div class="card-title">
            <span>📹</span>
            Video Interview Simulation
          </div>
          
          <div style="display: grid; grid-template-columns: 1fr 300px; gap: 24px; margin-bottom: 24px;">
            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                💼 Company Name
              </label>
              <input type="text" id="companyName" placeholder="Enter company name (e.g., Google, Microsoft)" 
                     style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md); margin-bottom: 16px;">
              
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                📄 Job Description
              </label>
              <textarea id="videoJobDesc" class="text-area" style="min-height: 120px;"
                        placeholder="Paste job description for targeted interview questions..."></textarea>
            </div>
            
            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                🎨 Virtual Background
              </label>
              <select id="backgroundSelect" style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md); margin-bottom: 16px;">
                <option value="office">Professional Office</option>
                <option value="home">Home Office</option>
                <option value="library">Library</option>
                <option value="neutral">Neutral</option>
              </select>
              
              <button class="btn" onclick="startVideoInterview()" style="width: 100%;">
                🎬 Start Video Interview
              </button>
            </div>
          </div>
        </div>

        <!-- Video Interview Interface -->
        <div id="videoInterviewInterface" style="display: none;">
          <div class="card">
            <div class="video-container">
              <video id="videoStream" class="video-stream" autoplay muted></video>
              <canvas id="analysisCanvas" style="display: none;"></canvas>
              
              <div class="confidence-meter">
                <div class="confidence-score" id="liveConfidenceScore">--</div>
                <div style="font-size: 0.8rem;">Live Confidence</div>
              </div>
              
              <div class="video-controls">
                <button class="video-btn" id="recordBtn" onclick="toggleRecording()">
                  🔴
                </button>
                <button class="video-btn" onclick="toggleCamera()">
                  📷
                </button>
                <button class="video-btn" onclick="toggleMicrophone()">
                  🎤
                </button>
                <button class="video-btn" onclick="endVideoInterview()">
                  ⏹️
                </button>
              </div>
            </div>
            
            <div class="behavioral-indicators">
              <div class="indicator-card">
                <div class="indicator-value" id="eyeContactScore">--</div>
                <div class="indicator-label">Eye Contact</div>
              </div>
              <div class="indicator-card">
                <div class="indicator-value" id="postureScore">--</div>
                <div class="indicator-label">Posture</div>
              </div>
              <div class="indicator-card">
                <div class="indicator-value" id="gestureScore">--</div>
                <div class="indicator-label">Gestures</div>
              </div>
              <div class="indicator-card">
                <div class="indicator-value" id="speechPaceScore">--</div>
                <div class="indicator-label">Speech Pace</div>
              </div>
            </div>
          </div>

          <!-- Video Chat Interface -->
          <div class="card">
            <div class="chat-container">
              <div class="chat-header">
                <h3 id="videoInterviewTitle">AI Interviewer - Company Name</h3>
                <div>
                  <span id="videoTimer">00:00</span>
                </div>
              </div>
              <div class="chat-messages" id="videoMessages">
                <!-- Video interview messages will appear here -->
              </div>
              <div class="chat-input-container">
                <div class="voice-controls">
                  <button class="voice-btn" id="voiceBtn" onclick="toggleVoiceInput()">
                    🎙️
                  </button>
                </div>
                <textarea class="chat-input" id="videoInput" placeholder="Speak or type your answer..." rows="1"></textarea>
                <button class="video-btn" onclick="sendVideoResponse()" id="sendVideoBtn">
                  ➡️
                </button>
              </div>
            </div>
          </div>
        </div>

        <!-- Video Analysis Results -->
        <div id="videoAnalysisResults" style="display: none;">
          <div class="card">
            <div class="card-title">
              <span>📊</span>
              Video Interview Analysis
            </div>
            
            <div style="display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 20px; margin-bottom: 32px;">
              <div class="metric-card">
                <div class="metric-value" id="videoOverallScore">--</div>
                <div class="metric-label">Overall Performance</div>
              </div>
              <div class="metric-card">
                <div class="metric-value" id="videoBehavioralScore">--</div>
                <div class="metric-label">Body Language</div>
              </div>
              <div class="metric-card">
                <div class="metric-value" id="videoCommunicationScore">--</div>
                <div class="metric-label">Communication</div>
              </div>
              <div class="metric-card">
                <div class="metric-value" id="videoConfidenceScore">--</div>
                <div class="metric-label">Confidence</div>
              </div>
            </div>
            
            <div id="videoFeedback">
              <!-- AI-generated feedback will appear here -->
            </div>
            
            <div style="text-align: center; margin-top: 24px;">
              <button class="btn" onclick="downloadVideoAnalysis()">
                📥 Download Analysis
              </button>
              <button class="btn btn-secondary" onclick="startNewVideoSession()">
                🔄 New Session
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Resume Analysis Section -->
      <div id="resume-analysis" class="page-section">
        <div class="card">
          <div class="card-title">
            <span>📋</span>
            Advanced Resume Analysis
          </div>

          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 32px; margin-bottom: 24px;">
            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                📄 Your Resume
              </label>
              <textarea id="resumeText" class="text-area" placeholder="Paste your resume text here..."></textarea>
            </div>
            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                💼 Job Description
              </label>
              <textarea id="jobDescription" class="text-area" placeholder="Paste the job description here..."></textarea>
            </div>
          </div>

          <div style="text-align: center; margin-bottom: 24px;">
            <button class="btn" onclick="analyzeResume()" id="analyzeBtn">
              🔍 Analyze with AI
            </button>
            <button class="btn btn-secondary" onclick="checkATSCompatibility()">
              🤖 Check ATS Compatibility
            </button>
          </div>
        </div>

        <!-- ATS Compatibility Results -->
        <div id="atsResults" style="display: none;">
          <div class="card">
            <div class="card-title">
              <span>🤖</span>
              ATS Compatibility Analysis
            </div>
            <div class="ats-score">
              <div class="ats-percentage" id="atsScore">--</div>
              <div class="ats-label">ATS Compatibility Score</div>
            </div>
            <div id="atsRecommendations">
              <!-- ATS recommendations will appear here -->
            </div>
          </div>
        </div>

        <!-- Resume Analysis Results -->
        <div id="analysisResults" style="display: none;">
          <div class="card">
            <div class="card-title">
              <span>📊</span>
              AI Resume Analysis Results
            </div>
            <div style="display: grid; grid-template-columns: 1fr 300px; gap: 32px;">
              <div id="feedbackContent">
                <!-- AI feedback will appear here -->
              </div>
              <div>
                <div style="background: linear-gradient(135deg, #ecfdf5 0%, #d1fae5 100%); border: 1px solid #a7f3d0; border-radius: var(--radius-lg); padding: 24px; text-align: center; margin-bottom: 20px;">
                  <div style="font-size: 3rem; font-weight: 700; color: var(--accent-color); margin-bottom: 8px;" id="matchScore">--</div>
                  <div style="color: #065f46; font-weight: 500;">Match Percentage</div>
                </div>
                <div style="background: var(--bg-primary); border-radius: var(--radius-lg); padding: 24px; border: 1px solid var(--border-light);">
                  <h4 style="margin-bottom: 20px;">📈 Skills Analysis</h4>
                  <canvas id="skillsChart" width="300" height="200"></canvas>
                </div>
              </div>
            </div>
            <div style="text-align: center; margin-top: 24px;">
              <button class="btn" onclick="downloadAnalysis()">
                📥 Download Report
              </button>
              <button class="btn btn-secondary" onclick="showSection('resume-builder')">
                📝 Optimize Resume
              </button>
            </div>
          </div>
        </div>
      </div>

      <!-- Interview Preparation Section -->
      <div id="interview-prep" class="page-section">
        <div class="card">
          <div class="card-title">
            <span>🎯</span>
            Interview Preparation
          </div>

          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px; margin-bottom: 24px;">
            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                🏢 Company Name
              </label>
              <input type="text" id="prepCompanyName" placeholder="Enter company name" 
                     style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md); margin-bottom: 16px;">
              
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                💼 Job Description
              </label>
              <textarea id="interviewJobDesc" class="text-area" style="min-height: 150px;"
                        placeholder="Paste the job description to generate relevant interview questions..."></textarea>
            </div>
            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                🎯 Interview Type
              </label>
              <select id="interviewType" style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md); margin-bottom: 16px;">
                <option value="general">General Interview</option>
                <option value="technical">Technical Interview</option>
                <option value="behavioral">Behavioral Interview</option>
                <option value="case-study">Case Study</option>
                <option value="system-design">System Design</option>
              </select>
              
              <button class="btn" onclick="predictInterviewStages()" id="predictBtn" style="width: 100%; margin-bottom: 12px;">
                🔮 Predict Interview Stages
              </button>
              <button class="btn btn-secondary" onclick="startTextInterviewSession()" style="width: 100%;">
                💬 Start Text Practice
              </button>
            </div>
          </div>
        </div>

        <!-- Interview Stages -->
        <div id="interviewStages" style="display: none;">
          <div class="card">
            <div class="card-title">
              <span>📋</span>
              AI-Predicted Interview Process
            </div>
            <div id="stagesContainer" class="stages-container">
              <!-- Dynamic stages will appear here -->
            </div>
          </div>
        </div>

        <!-- Text Interview Session -->
        <div id="textInterviewSession" style="display: none;">
          <div class="card">
            <div class="card-title">
              <span>💬</span>
              AI Interview Practice - <span id="currentStageTitle">Practice Session</span>
            </div>

            <div class="chat-container">
              <div class="chat-header">
                <h3 id="textInterviewTitle">AI Interviewer</h3>
                <div>
                  <button class="btn btn-secondary" onclick="endTextSession()" style="font-size: 0.8rem; padding: 8px 16px;">
                    End Session
                  </button>
                </div>
              </div>
              <div class="chat-messages" id="textInterviewMessages">
                <!-- Messages will appear here -->
              </div>
              <div class="chat-input-container">
                <div class="voice-controls">
                  <button class="voice-btn" id="textVoiceBtn" onclick="toggleTextVoiceInput()">
                    🎙️
                  </button>
                </div>
                <textarea class="chat-input" id="textInterviewInput" placeholder="Type or speak your answer..." rows="1"></textarea>
                <button class="video-btn" onclick="sendTextInterviewResponse()" id="sendTextBtn">
                  ➡️
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Progress Dashboard Section -->
      <div id="progress-dashboard" class="page-section">
        <div class="card">
          <div class="card-title">
            <span>📊</span>
            Progress Tracking Dashboard
          </div>
          
          <div class="dashboard-grid">
            <div class="metric-card">
              <div class="metric-value" id="totalSessions">0</div>
              <div class="metric-label">Total Practice Sessions</div>
              <div class="metric-trend" id="sessionTrend">This month</div>
            </div>
            <div class="metric-card">
              <div class="metric-value" id="avgConfidence">--</div>
              <div class="metric-label">Average Confidence</div>
              <div class="metric-trend" id="confidenceChange">No change yet</div>
            </div>
            <div class="metric-card">
              <div class="metric-value" id="improvementRate">--</div>
              <div class="metric-label">Improvement Rate</div>
              <div class="metric-trend" id="improvementTrend">Track progress</div>
            </div>
            <div class="metric-card">
              <div class="metric-value" id="goalsCompleted">0</div>
              <div class="metric-label">Goals Completed</div>
              <div class="metric-trend" id="goalsTrend">Set goals to track</div>
            </div>
          </div>
        </div>

        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px;">
          <div class="card">
            <div class="card-title">
              <span>📈</span>
              Performance Trends
            </div>
            <canvas id="performanceTrendChart" width="400" height="250"></canvas>
          </div>
          <div class="card">
            <div class="card-title">
              <span>🎯</span>
              Skill Development
            </div>
            <canvas id="skillDevelopmentChart" width="400" height="250"></canvas>
          </div>
        </div>

        <div class="card">
          <div class="card-title">
            <span>📚</span>
            Interview History
          </div>
          <div id="interviewHistory">
            <p style="color: var(--text-secondary); text-align: center; padding: 40px;">
              Complete interview sessions will appear here with detailed analytics.
            </p>
          </div>
        </div>

        <div class="card">
          <div class="card-title">
            <span>🏆</span>
            Goal Setting & Milestones
          </div>
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px;">
            <div>
              <h4 style="margin-bottom: 16px;">Set New Goal</h4>
              <input type="text" id="newGoal" placeholder="Enter your interview preparation goal" 
                     style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md); margin-bottom: 12px;">
              <button class="btn" onclick="addGoal()" style="width: 100%;">
                ➕ Add Goal
              </button>
            </div>
            <div>
              <h4 style="margin-bottom: 16px;">Active Goals</h4>
              <div id="activeGoals">
                <p style="color: var(--text-secondary);">No goals set yet. Add your first goal!</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- AI Insights Section -->
      <div id="ai-insights" class="page-section">
        <div class="card">
          <div class="card-title">
            <span>🧠</span>
            AI-Powered Interview Insights
          </div>
          
          <div class="dashboard-grid">
            <div class="metric-card">
              <div class="metric-value" id="personalityType">--</div>
              <div class="metric-label">Dominant Trait</div>
              <div class="metric-trend">Big Five Analysis</div>
            </div>
            <div class="metric-card">
              <div class="metric-value" id="communicationStyle">--</div>
              <div class="metric-label">Communication Style</div>
              <div class="metric-trend">AI-Detected Pattern</div>
            </div>
            <div class="metric-card">
              <div class="metric-value" id="industryReadiness">--</div>
              <div class="metric-label">Industry Readiness</div>
              <div class="metric-trend">Match Assessment</div>
            </div>
            <div class="metric-card">
              <div class="metric-value" id="stressLevel">--</div>
              <div class="metric-label">Stress Indicators</div>
              <div class="metric-trend">Behavioral Analysis</div>
            </div>
          </div>
        </div>

        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px;">
          <div class="card">
            <div class="card-title">
              <span>🎭</span>
              Personality Assessment
            </div>
            <canvas id="personalityChart" width="400" height="300"></canvas>
            <div id="personalityInsights">
              <p style="color: var(--text-secondary); text-align: center;">
                Complete interview sessions to generate personality insights.
              </p>
            </div>
          </div>
          
          <div class="card">
            <div class="card-title">
              <span>💬</span>
              Communication Analysis
            </div>
            <div id="communicationAnalysis">
              <div style="margin-bottom: 20px;">
                <h4>Filler Words Analysis</h4>
                <div id="fillerWords" style="color: var(--text-secondary);">No data available</div>
              </div>
              <div style="margin-bottom: 20px;">
                <h4>Speech Pace</h4>
                <div id="speechPace" style="color: var(--text-secondary);">No data available</div>
              </div>
              <div>
                <h4>Clarity Score</h4>
                <div id="clarityScore" style="color: var(--text-secondary);">No data available</div>
              </div>
            </div>
          </div>
        </div>

        <div class="card">
          <div class="card-title">
            <span>📊</span>
            Confidence Trend Analysis
          </div>
          <canvas id="confidenceTrendChart" width="800" height="300"></canvas>
        </div>
      </div>

      <!-- Resume Builder Section -->
      <div id="resume-builder" class="page-section">
        <div class="card">
          <div class="card-title">
            <span>📝</span>
            AI-Powered Resume Builder
          </div>
          
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px; margin-bottom: 24px;">
            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                🎯 Target Role
              </label>
              <input type="text" id="targetRole" placeholder="e.g., Software Engineer, Product Manager" 
                     style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md); margin-bottom: 16px;">
              
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                🏭 Industry
              </label>
              <select id="targetIndustry" style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md);">
                <option value="technology">Technology</option>
                <option value="finance">Finance</option>
                <option value="healthcare">Healthcare</option>
                <option value="consulting">Consulting</option>
                <option value="marketing">Marketing</option>
                <option value="education">Education</option>
                <option value="other">Other</option>
              </select>
            </div>
            
            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                📋 Resume Template
              </label>
              <select id="resumeTemplate" style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md); margin-bottom: 16px;">
                <option value="modern">Modern Professional</option>
                <option value="classic">Classic Traditional</option>
                <option value="creative">Creative Design</option>
                <option value="tech">Tech-Focused</option>
                <option value="executive">Executive</option>
              </select>
              
              <button class="btn" onclick="generateResumeTemplate()" style="width: 100%;">
                🎨 Generate Template
              </button>
            </div>
          </div>
        </div>

        <div class="card">
          <div class="card-title">
            <span>✍️</span>
            Resume Content Editor
          </div>
          
          <textarea id="resumeBuilder" class="text-area" style="min-height: 400px;" 
                    placeholder="Your AI-generated resume will appear here. You can edit and customize it."></textarea>
          
          <div style="display: flex; gap: 12px; margin-top: 20px; flex-wrap: wrap;">
            <button class="btn" onclick="optimizeForATS()">
              🤖 Optimize for ATS
            </button>
            <button class="btn btn-secondary" onclick="createMultipleVersions()">
              📄 Create Versions
            </button>
            <button class="btn btn-secondary" onclick="testResumeVersions()">
              🔬 A/B Test Versions
            </button>
            <button class="btn btn-secondary" onclick="downloadResume()">
              📥 Download Resume
            </button>
          </div>
        </div>

        <div id="resumeVersions" style="display: none;">
          <div class="card">
            <div class="card-title">
              <span>📄</span>
              Resume Versions & A/B Testing
            </div>
            <div id="versionsList">
              <!-- Multiple resume versions will appear here -->
            </div>
          </div>
        </div>
      </div>

      <!-- Career Coach Section -->
      <div id="career-coach" class="page-section">
        <div class="card">
          <div class="card-title">
            <span>🚀</span>
            AI Career Coach
          </div>
          
          <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px; margin-bottom: 24px;">
            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                💼 Current Role/Level
              </label>
              <input type="text" id="currentRole" placeholder="e.g., Junior Developer, Manager" 
                     style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md); margin-bottom: 16px;">
              
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                🎯 Career Goals
              </label>
              <textarea id="careerGoals" placeholder="Describe your career aspirations..."
                        style="width: 100%; min-height: 100px; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md);"></textarea>
            </div>
            
            <div>
              <label style="display: block; margin-bottom: 8px; font-weight: 500;">
                🏭 Target Industry
              </label>
              <select id="coachTargetIndustry" style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md); margin-bottom: 16px;">
                <option value="technology">Technology</option>
                <option value="finance">Finance</option>
                <option value="healthcare">Healthcare</option>
                <option value="consulting">Consulting</option>
                <option value="marketing">Marketing</option>
                <option value="education">Education</option>
                <option value="other">Other</option>
              </select>
              
              <button class="btn" onclick="generateCareerRoadmap()" style="width: 100%;">
                🗺️ Generate Career Roadmap
              </button>
            </div>
          </div>
        </div>

        <div id="careerRoadmap" style="display: none;">
          <div class="card">
            <div class="card-title">
              <span>🗺️</span>
              Personalized Career Roadmap
            </div>
            <div id="roadmapContent">
              <!-- AI-generated career roadmap will appear here -->
            </div>
          </div>
        </div>

        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px;">
          <div class="card">
            <div class="card-title">
              <span>📊</span>
              Market Trend Analysis
            </div>
            <div id="marketTrends">
              <button class="btn" onclick="analyzeMarketTrends()" style="width: 100%;">
                📈 Analyze Current Market
              </button>
              <div id="trendsContent" style="margin-top: 20px;">
                <p style="color: var(--text-secondary); text-align: center;">
                  Click above to get AI-powered market insights for your industry.
                </p>
              </div>
            </div>
          </div>
          
          <div class="card">
            <div class="card-title">
              <span>🎯</span>
              Skill Gap Analysis
            </div>
            <div id="skillGapAnalysis">
              <button class="btn" onclick="analyzeSkillGaps()" style="width: 100%;">
                🔍 Identify Skill Gaps
              </button>
              <div id="skillGapContent" style="margin-top: 20px;">
                <p style="color: var(--text-secondary); text-align: center;">
                  Discover what skills you need to reach your career goals.
                </p>
              </div>
            </div>
          </div>
        </div>

        <div class="card">
          <div class="card-title">
            <span>💼</span>
            AI-Recommended Opportunities
          </div>
          <div id="opportunityMatching">
            <button class="btn" onclick="findOpportunities()" style="width: 200px;">
              🔍 Find Opportunities
            </button>
            <div id="opportunitiesContent" style="margin-top: 20px;">
              <p style="color: var(--text-secondary); text-align: center;">
                Get personalized job recommendations based on your profile.
              </p>
            </div>
          </div>
        </div>
      </div>

      <!-- Testimonials Section -->
      <div id="testimonials" class="page-section">
        <div class="card">
          <div class="card-title">
            <span>💬</span>
            User Success Stories
          </div>
          
          <div class="testimonials-grid" id="testimonialsContainer">
            <!-- User testimonials will be loaded here -->
            <p style="color: var(--text-secondary); text-align: center; grid-column: 1 / -1; padding: 40px;">
              Share your success story after using Interview Copilot Pro!
            </p>
          </div>
          
          <div style="text-align: center; margin-top: 32px;">
            <button class="btn" onclick="loadTestimonials()">
              📝 Load Success Stories
            </button>
            <button class="btn btn-secondary" onclick="showTestimonialForm()">
              ➕ Share Your Story
            </button>
          </div>
        </div>

        <!-- Testimonial Submission Form -->
        <div id="testimonialForm" style="display: none;">
          <div class="card">
            <div class="card-title">
              <span>✍️</span>
              Share Your Success Story
            </div>
            
            <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 24px; margin-bottom: 20px;">
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 500;">Your Name</label>
                <input type="text" id="testimonialName" placeholder="Enter your name" 
                       style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md);">
              </div>
              <div>
                <label style="display: block; margin-bottom: 8px; font-weight: 500;">Your Role</label>
                <input type="text" id="testimonialRole" placeholder="e.g., Software Engineer at Google" 
                       style="width: 100%; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md);">
              </div>
            </div>
            
            <label style="display: block; margin-bottom: 8px; font-weight: 500;">Your Success Story</label>
            <textarea id="testimonialContent" placeholder="Tell us how Interview Copilot Pro helped you..."
                      style="width: 100%; min-height: 120px; padding: 12px; border: 1px solid var(--border-color); border-radius: var(--radius-md); margin-bottom: 20px;"></textarea>
            
            <div style="text-align: center;">
              <button class="btn" onclick="submitTestimonial()">
                📤 Submit Story
              </button>
              <button class="btn btn-secondary" onclick="hideTestimonialForm()">
                ❌ Cancel
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Enhanced Footer -->
    <footer class="footer">
      <div class="footer-content">
        <div class="footer-main">
          <div class="footer-section">
            <h4>🚀 Interview Copilot Pro</h4>
            <p>
              Transform your career with AI-powered interview preparation, video simulation, 
              and personalized coaching. Built for the modern job seeker.
            </p>
          </div>
          <div class="footer-section">
            <h4>✨ Premium Features</h4>
            <ul>
              <li><a href="#video-interview">Video Interview Simulation</a></li>
              <li><a href="#ai-insights">AI Behavioral Analysis</a></li>
              <li><a href="#resume-builder">Dynamic Resume Builder</a></li>
              <li><a href="#career-coach">AI Career Coach</a></li>
            </ul>
          </div>
          <div class="footer-section">
            <h4>📚 Resources</h4>
            <ul>
              <li><a href="#progress-dashboard">Progress Tracking</a></li>
              <li><a href="#testimonials">Success Stories</a></li>
              <li><a href="https://amishsri.framer.website/contact">Support Center</a></li>
              <li><a href="#ai-insights">Interview Analytics</a></li>
            </ul>
          </div>
          <div class="footer-section">
            <h4>🎯 Industries</h4>
            <ul>
              <li>Technology & Software</li>
              <li>Finance & Banking</li>
              <li>Healthcare & Medical</li>
              <li>Consulting & Strategy</li>
            </ul>
          </div>
        </div>

        <div class="footer-creator">
          <a href="https://amishsri.framer.website" target="_blank" class="creator-badge">
            <span>💻</span>
            <span>Engineered by Amish</span>
          </a>
          <div style="display: flex; gap: 12px;">
            <a href="https://www.instagram.com/amish_ideaspace/" style="width: 40px; height: 40px; background: var(--bg-tertiary); border-radius: 50%; display: flex; align-items: center; justify-content: center; text-decoration: none; border: 1px solid var(--border-light); transition: all 0.3s ease;">📱</a>
            <a href="https://www.linkedin.com/in/amish-sri07/" style="width: 40px; height: 40px; background: var(--bg-tertiary); border-radius: 50%; display: flex; align-items: center; justify-content: center; text-decoration: none; border: 1px solid var(--border-light); transition: all 0.3s ease;">💼</a>
            <a href="https://amishsri.framer.website/contact" style="width: 40px; height: 40px; background: var(--bg-tertiary); border-radius: 50%; display: flex; align-items: center; justify-content: center; text-decoration: none; border: 1px solid var(--border-light); transition: all 0.3s ease;">📧</a>
            <a href="https://github.com/amish07" style="width: 40px; height: 40px; background: var(--bg-tertiary); border-radius: 50%; display: flex; align-items: center; justify-content: center; text-decoration: none; border: 1px solid var(--border-light); transition: all 0.3s ease;">🔗</a>
          </div>
        </div>
      </div>
    </footer>

    <script>
      // Configuration
      const API_CONFIG = {
        development: "http://localhost:3000",
        production: "https://interview-copilot-pro-backend-production.up.railway.app",
      };

      const API_BASE_URL = window.location.hostname === "localhost" 
        ? API_CONFIG.development 
        : API_CONFIG.production;

      // Global State Management
      const state = {
        currentSection: "home",
        apiConnected: false,
        
        // User Data
        userData: {
          name: "",
          email: "",
          currentRole: "",
          targetRole: "",
          industry: ""
        },
        
        // Session Data
        sessions: [],
        currentSession: null,
        
        // Analytics Data
        analytics: {
          totalSessions: 0,
          averageConfidence: 0,
          skillProgress: {},
          personalityTraits: {},
          communicationMetrics: {},
          goals: []
        },
        
        // Video Interview State
        videoState: {
          isRecording: false,
          stream: null,
          recorder: null,
          analysisInterval: null,
          behavioralMetrics: {
            eyeContact: 0,
            posture: 0,
            gestures: 0,
            speechPace: 0
          }
        },
        
        // Voice Recognition State
        voiceRecognition: null,
        isListening: false,
        
        // Resume Data
        resumeData: {
          analysis: null,
          versions: [],
          atsScore: 0
        },
        
        // Career Data
        careerData: {
          roadmap: null,
          skillGaps: [],
          marketTrends: {},
          opportunities: []
        }
      };

      // Utility Functions
      function showToast(message, type = "info") {
        const toast = document.createElement("div");
        toast.className = `toast ${type}`;
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
      }

      function generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
      }

      function formatDate(date) {
        return new Intl.DateTimeFormat('en-US', {
          year: 'numeric',
          month: 'short',
          day: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        }).format(new Date(date));
      }

      // API Helper Functions
      async function makeAPICall(endpoint, data = null, method = "GET") {
        try {
          const options = {
            method: method,
            headers: { "Content-Type": "application/json" },
          };

          if (data && method !== "GET") {
            options.body = JSON.stringify(data);
          }

          const response = await fetch(`${API_BASE_URL}${endpoint}`, options);
          if (!response.ok) {
            const errorData = await response.json().catch(() => ({}));
            throw new Error(errorData.error?.message || `API Error: ${response.status}`);
          }

          return await response.json();
        } catch (error) {
          console.error("API Call Error:", error);
          throw new Error(`Failed to connect to server: ${error.message}`);
        }
      }

      async function checkAPIStatus() {
        try {
          const response = await makeAPICall("/health");
          updateAPIStatus(response.status === "healthy", "Connected");
          state.apiConnected = response.status === "healthy";
        } catch (error) {
          updateAPIStatus(false, "Disconnected");
          state.apiConnected = false;
        }
      }

      function updateAPIStatus(isOnline, statusText) {
        const indicator = document.getElementById("statusIndicator");
        const text = document.getElementById("statusText");
        
        if (isOnline) {
          indicator.classList.add("online");
        } else {
          indicator.classList.remove("online");
        }
        text.textContent = statusText;
      }

      // Navigation Functions
      function toggleSidebar() {
        const sidebar = document.getElementById("sidebar");
        sidebar.classList.toggle("active");
      }

      function showSection(sectionId) {
        // Hide all sections
        document.querySelectorAll(".page-section").forEach(section => {
          section.classList.remove("active");
        });

        // Remove active class from all navigation items
        document.querySelectorAll(".nav-tab, .sidebar-nav-item").forEach(item => {
          item.classList.remove("active");
        });

        // Show selected section
        document.getElementById(sectionId).classList.add("active");

        // Add active class to current navigation item
        if (event?.target) {
          event.target.classList.add("active");
        }

        // Close sidebar on mobile
        if (window.innerWidth <= 768) {
          document.getElementById("sidebar").classList.remove("active");
        }

        state.currentSection = sectionId;
        
        // Load section-specific data
        loadSectionData(sectionId);
      }

      function loadSectionData(sectionId) {
        switch(sectionId) {
          case 'home':
            updateDashboardMetrics();
            loadRecentActivity();
            break;
          case 'progress-dashboard':
            updateProgressDashboard();
            break;
          case 'ai-insights':
            updateAIInsights();
            break;
          default:
            break;
        }
      }

      // Dashboard Functions
      function updateDashboardMetrics() {
        document.getElementById("dashboardInterviews").textContent = state.analytics.totalSessions;
        document.getElementById("dashboardConfidence").textContent = 
          state.analytics.averageConfidence > 0 ? `${state.analytics.averageConfidence}%` : "--";
        
        // Calculate skills match from recent resume analysis
        const skillsMatch = state.resumeData.analysis?.matchPercentage || 0;
        document.getElementById("dashboardSkills").textContent = 
          skillsMatch > 0 ? `${skillsMatch}%` : "--";
        
        // Calculate overall readiness
        const readiness = calculateOverallReadiness();
        document.getElementById("dashboardReadiness").textContent = 
          readiness > 0 ? `${readiness}%` : "--";
        
        // Update trends
        updateDashboardTrends();
      }

      function calculateOverallReadiness() {
        const confidence = state.analytics.averageConfidence || 0;
        const skillMatch = state.resumeData.analysis?.matchPercentage || 0;
        const sessionCount = Math.min(state.analytics.totalSessions * 10, 30);
        
        return Math.round((confidence + skillMatch + sessionCount) / 3);
      }

      function updateDashboardTrends() {
        const sessions = state.sessions.length;
        document.getElementById("interviewTrend").textContent = 
          sessions > 0 ? `+${sessions} this month` : "Start practicing";
        
        document.getElementById("confidenceTrend").textContent = 
          state.analytics.averageConfidence > 0 ? "Improving" : "AI-Analyzed";
        
        document.getElementById("skillsTrend").textContent = 
          state.resumeData.analysis ? "Optimized" : "Ready to analyze";
        
        document.getElementById("readinessTrend").textContent = 
          calculateOverallReadiness() > 70 ? "Interview Ready" : "Keep practicing";
      }

      function loadRecentActivity() {
        const activityContainer = document.getElementById("recentActivity");
        
        if (state.sessions.length === 0) {
          activityContainer.innerHTML = `
            <p style="color: var(--text-secondary); text-align: center; padding: 40px;">
              Start your first interview practice session to see your activity here.
            </p>
          `;
          return;
        }

        const recentSessions = state.sessions.slice(-5).reverse();
        activityContainer.innerHTML = recentSessions.map(session => `
          <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px 0; border-bottom: 1px solid var(--border-light);">
            <div>
              <strong>${session.company || 'Practice Session'}</strong>
              <br>
              <small style="color: var(--text-secondary);">${formatDate(session.date)}</small>
            </div>
            <div style="text-align: right;">
              <div style="color: var(--primary-color); font-weight: 600;">${session.overallScore || '--'}%</div>
              <small style="color: var(--text-secondary);">${session.type || 'General'}</small>
            </div>
          </div>
        `).join('');
      }

      // Video Interview Functions
      async function startVideoInterview() {
        const company = document.getElementById("companyName").value.trim();
        const jobDesc = document.getElementById("videoJobDesc").value.trim();
        
        if (!company || !jobDesc) {
          showToast("Please provide company name and job description", "error");
          return;
        }

        try {
          // Request camera and microphone access
          const stream = await navigator.mediaDevices.getUserMedia({ 
            video: true, 
            audio: true 
          });
          
          const videoStream = document.getElementById("videoStream");
          videoStream.srcObject = stream;
          state.videoState.stream = stream;
          
          // Show video interface
          document.getElementById("videoInterviewInterface").style.display = "block";
          document.getElementById("videoInterviewTitle").textContent = `AI Interviewer - ${company}`;
          
          // Start behavioral analysis
          startBehavioralAnalysis();
          
          // Generate first question
          await generateVideoQuestion(company, jobDesc, "general");
          
          showToast("Video interview started successfully", "success");
          
        } catch (error) {
          console.error("Video interview error:", error);
          showToast("Failed to access camera/microphone", "error");
        }
      }

      function startBehavioralAnalysis() {
        // Simulate behavioral analysis (in a real app, this would use computer vision)
        state.videoState.analysisInterval = setInterval(() => {
          // Generate simulated metrics based on random values with some improvement over time
          const baseScore = 60 + Math.random() * 30;
          const timeBonus = Math.min(Date.now() % 10000 / 1000, 10); // Improvement over time
          
          state.videoState.behavioralMetrics = {
            eyeContact: Math.round(Math.min(baseScore + timeBonus + Math.random() * 10, 95)),
            posture: Math.round(Math.min(baseScore + timeBonus + Math.random() * 15, 95)),
            gestures: Math.round(Math.min(baseScore + timeBonus + Math.random() * 12, 95)),
            speechPace: Math.round(Math.min(baseScore + Math.random() * 20, 95))
          };
          
          // Update UI
          document.getElementById("eyeContactScore").textContent = `${state.videoState.behavioralMetrics.eyeContact}%`;
          document.getElementById("postureScore").textContent = `${state.videoState.behavioralMetrics.posture}%`;
          document.getElementById("gestureScore").textContent = `${state.videoState.behavioralMetrics.gestures}%`;
          document.getElementById("speechPaceScore").textContent = `${state.videoState.behavioralMetrics.speechPace}%`;
          
          // Update live confidence score
          const avgScore = Object.values(state.videoState.behavioralMetrics)
            .reduce((a, b) => a + b, 0) / 4;
          document.getElementById("liveConfidenceScore").textContent = `${Math.round(avgScore)}%`;
          
        }, 2000);
      }

      async function generateVideoQuestion(company, jobDesc, questionType) {
        if (!state.apiConnected) {
          addVideoMessage("assistant", "Welcome to your interview practice with " + company + ". Let's start with: Tell me about yourself and why you're interested in this position.");
          return;
        }

        try {
          const response = await makeAPICall("/api/chat/completions", {
            taskType: "hr",
            messages: [{
              role: "user",
              content: `You are an experienced interviewer for ${company}. 
              
Job Description: ${jobDesc}

Generate a realistic, engaging interview question appropriate for this role. 
Make it specific to the company and position. Respond with just the question.`
            }]
          }, "POST");

          if (response.success) {
            addVideoMessage("assistant", response.data.content);
          } else {
            throw new Error("Failed to generate question");
          }
        } catch (error) {
          console.error("Question generation error:", error);
          addVideoMessage("assistant", "Welcome to your interview practice. Let's begin with: Tell me about yourself and why you're interested in this position.");
        }
      }

      function addVideoMessage(sender, content) {
        const messagesContainer = document.getElementById("videoMessages");
        const messageDiv = document.createElement("div");
        messageDiv.className = `message ${sender}`;
        messageDiv.textContent = content;
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      function toggleRecording() {
        const recordBtn = document.getElementById("recordBtn");
        
        if (!state.videoState.isRecording) {
          // Start recording
          state.videoState.isRecording = true;
          recordBtn.classList.add("recording");
          recordBtn.textContent = "⏹️";
          showToast("Recording started", "info");
        } else {
          // Stop recording
          state.videoState.isRecording = false;
          recordBtn.classList.remove("recording");
          recordBtn.textContent = "🔴";
          showToast("Recording stopped", "info");
        }
      }

      function toggleCamera() {
        if (state.videoState.stream) {
          const videoTrack = state.videoState.stream.getVideoTracks()[0];
          videoTrack.enabled = !videoTrack.enabled;
          showToast(videoTrack.enabled ? "Camera enabled" : "Camera disabled", "info");
        }
      }

      function toggleMicrophone() {
        if (state.videoState.stream) {
          const audioTrack = state.videoState.stream.getAudioTracks()[0];
          audioTrack.enabled = !audioTrack.enabled;
          showToast(audioTrack.enabled ? "Microphone enabled" : "Microphone disabled", "info");
        }
      }

      function endVideoInterview() {
        // Stop streams
        if (state.videoState.stream) {
          state.videoState.stream.getTracks().forEach(track => track.stop());
        }
        
        // Stop analysis
        if (state.videoState.analysisInterval) {
          clearInterval(state.videoState.analysisInterval);
        }
        
        // Generate session results
        generateVideoAnalysisResults();
        
        // Hide video interface, show results
        document.getElementById("videoInterviewInterface").style.display = "none";
        document.getElementById("videoAnalysisResults").style.display = "block";
        
        showToast("Video interview completed", "success");
      }

      function generateVideoAnalysisResults() {
        const metrics = state.videoState.behavioralMetrics;
        const overall = Math.round(Object.values(metrics).reduce((a, b) => a + b, 0) / 4);
        
        // Create session record
        const session = {
          id: generateId(),
          type: "video",
          company: document.getElementById("companyName").value,
          date: Date.now(),
          overallScore: overall,
          behavioralScore: Math.round((metrics.eyeContact + metrics.posture + metrics.gestures) / 3),
          communicationScore: metrics.speechPace,
          confidenceScore: overall,
          metrics: metrics
        };
        
        state.sessions.push(session);
        state.analytics.totalSessions = state.sessions.length;
        
        // Update UI
        document.getElementById("videoOverallScore").textContent = `${overall}%`;
        document.getElementById("videoBehavioralScore").textContent = `${session.behavioralScore}%`;
        document.getElementById("videoCommunicationScore").textContent = `${session.communicationScore}%`;
        document.getElementById("videoConfidenceScore").textContent = `${session.confidenceScore}%`;
        
        // Generate AI feedback
        generateVideoFeedback(session);
      }

      async function generateVideoFeedback(session) {
        const feedbackContainer = document.getElementById("videoFeedback");
        
        if (!state.apiConnected) {
          feedbackContainer.innerHTML = `
            <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 20px; margin-bottom: 16px; border-left: 4px solid var(--primary-color);">
              <h4>Performance Summary</h4>
              <p>Overall performance: ${session.overallScore}%. Good engagement throughout the session. 
              Continue practicing to improve confidence and communication clarity.</p>
            </div>
          `;
          return;
        }

        try {
          const response = await makeAPICall("/api/chat/completions", {
            taskType: "hr",
            messages: [{
              role: "user",
              content: `Analyze this video interview performance and provide feedback:

Company: ${session.company}
Overall Score: ${session.overallScore}%
Behavioral Score: ${session.behavioralScore}%
Communication Score: ${session.communicationScore}%
Eye Contact: ${session.metrics.eyeContact}%
Posture: ${session.metrics.posture}%
Gestures: ${session.metrics.gestures}%
Speech Pace: ${session.metrics.speechPace}%

Provide constructive feedback focusing on strengths and improvement areas. 
Keep it encouraging and actionable.`
            }]
          }, "POST");

          if (response.success) {
            feedbackContainer.innerHTML = `
              <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 20px; margin-bottom: 16px; border-left: 4px solid var(--primary-color);">
                <h4>AI Performance Analysis</h4>
                <p style="white-space: pre-wrap; line-height: 1.6;">${response.data.content}</p>
              </div>
            `;
          }
        } catch (error) {
          console.error("Feedback generation error:", error);
          feedbackContainer.innerHTML = `
            <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 20px; margin-bottom: 16px; border-left: 4px solid var(--primary-color);">
              <h4>Performance Summary</h4>
              <p>Good interview performance. Continue practicing to build confidence and refine your responses.</p>
            </div>
          `;
        }
      }

      // Voice Recognition Functions
      function initializeVoiceRecognition() {
        if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
          const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
          state.voiceRecognition = new SpeechRecognition();
          
          state.voiceRecognition.continuous = false;
          state.voiceRecognition.interimResults = false;
          state.voiceRecognition.lang = 'en-US';
          
          state.voiceRecognition.onstart = function() {
            state.isListening = true;
          };
          
          state.voiceRecognition.onresult = function(event) {
            const transcript = event.results[0][0].transcript;
            const activeInput = document.querySelector('.chat-input:focus') || 
                              document.getElementById('videoInput') || 
                              document.getElementById('textInterviewInput');
            
            if (activeInput) {
              activeInput.value += (activeInput.value ? ' ' : '') + transcript;
            }
          };
          
          state.voiceRecognition.onerror = function(event) {
            console.error('Voice recognition error:', event.error);
            showToast('Voice recognition error', 'error');
            state.isListening = false;
            updateVoiceButtons();
          };
          
          state.voiceRecognition.onend = function() {
            state.isListening = false;
            updateVoiceButtons();
          };
        }
      }

      function toggleVoiceInput() {
        if (!state.voiceRecognition) {
          showToast('Voice recognition not supported in this browser', 'error');
          return;
        }

        if (state.isListening) {
          state.voiceRecognition.stop();
        } else {
          state.voiceRecognition.start();
        }
      }

      function toggleTextVoiceInput() {
        toggleVoiceInput();
      }

      function updateVoiceButtons() {
        const voiceBtns = document.querySelectorAll('.voice-btn');
        voiceBtns.forEach(btn => {
          if (state.isListening) {
            btn.classList.add('active');
          } else {
            btn.classList.remove('active');
          }
        });
      }

      // Resume Analysis Functions
      async function analyzeResume() {
        const resumeText = document.getElementById("resumeText").value.trim();
        const jobDescription = document.getElementById("jobDescription").value.trim();

        if (!resumeText || !jobDescription) {
          showToast("Please provide both resume and job description", "error");
          return;
        }

        if (!state.apiConnected) {
          showToast("Backend server is not connected. Please try again later.", "error");
          return;
        }

        const btn = document.getElementById("analyzeBtn");
        btn.disabled = true;
        btn.innerHTML = '<div class="loading-spinner"></div> Analyzing with AI...';

        try {
          const response = await makeAPICall("/api/analyze-resume", {
            resumeText: resumeText,
            jobDescription: jobDescription,
          }, "POST");

          if (response.success) {
            const analysis = parseAIResponse(response.data.content);
            state.resumeData.analysis = analysis;
            displayAnalysisResults(analysis);
            showToast("AI resume analysis completed successfully!", "success");
          } else {
            throw new Error(response.error?.message || "Analysis failed");
          }
        } catch (error) {
          console.error("Analysis error:", error);
          showToast(`Analysis failed: ${error.message}`, "error");
        } finally {
          btn.disabled = false;
          btn.innerHTML = "🔍 Analyze with AI";
        }
      }

      function parseAIResponse(content) {
        try {
          return JSON.parse(content);
        } catch (e) {
          const jsonMatches = content.match(/```(?:json)?\s*(\{[\s\S]*?\})\s*```/);
          if (jsonMatches && jsonMatches[1]) {
            try {
              return JSON.parse(jsonMatches[1]);
            } catch (e2) {
              console.log("JSON parsing failed, creating structured response");
            }
          }
          
          return createStructuredResponseFromText(content);
        }
      }

      function createStructuredResponseFromText(text) {
        const matchRegex = /(\d+)%/;
        const matchMatch = text.match(matchRegex);
        const matchPercentage = matchMatch ? parseInt(matchMatch[1]) : 75;

        return {
          matchPercentage: matchPercentage,
          rawContent: text,
          suggestions: ["Improve keyword matching and quantify achievements"],
          strengths: ["Professional experience demonstrated"],
          summary: text.split("\n")[0] || "Analysis completed successfully",
        };
      }

      function displayAnalysisResults(analysis) {
        const matchScore = analysis.matchPercentage || 75;
        document.getElementById("matchScore").textContent = matchScore + "%";

        const feedbackContent = document.getElementById("feedbackContent");
        let feedbackHTML = "";

        if (analysis.rawContent && !analysis.strengths) {
          feedbackHTML = `
            <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 20px; margin-bottom: 16px; border-left: 4px solid var(--primary-color);">
              <h4>AI Analysis</h4>
              <p style="white-space: pre-wrap; line-height: 1.6;">${analysis.rawContent}</p>
            </div>
          `;
        } else {
          if (analysis.strengths) {
            feedbackHTML += `
              <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 20px; margin-bottom: 16px; border-left: 4px solid var(--accent-color);">
                <h4>Your Strengths</h4>
                <p>${Array.isArray(analysis.strengths) ? analysis.strengths.join(", ") : analysis.strengths}</p>
              </div>
            `;
          }

          if (analysis.suggestions) {
            feedbackHTML += `
              <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 20px; margin-bottom: 16px; border-left: 4px solid var(--primary-color);">
                <h4>AI Suggestions</h4>
                <p>${Array.isArray(analysis.suggestions) ? analysis.suggestions.join(", ") : analysis.suggestions}</p>
              </div>
            `;
          }
        }

        feedbackContent.innerHTML = feedbackHTML;
        createSkillsChart({ matchPercentage: matchScore });
        document.getElementById("analysisResults").style.display = "block";
      }

      function createSkillsChart(analysis) {
        const ctx = document.getElementById("skillsChart").getContext("2d");
        if (window.skillsChartInstance) {
          window.skillsChartInstance.destroy();
        }

        const matchPercentage = analysis.matchPercentage || 75;
        window.skillsChartInstance = new Chart(ctx, {
          type: "doughnut",
          data: {
            labels: ["Match", "Gap"],
            datasets: [{
              data: [matchPercentage, 100 - matchPercentage],
              backgroundColor: ["#10b981", "#ef4444"],
              borderWidth: 0,
            }],
          },
          options: {
            responsive: true,
            plugins: {
              legend: { position: "bottom" },
            },
          },
        });
      }

      async function checkATSCompatibility() {
        const resumeText = document.getElementById("resumeText").value.trim();
        if (!resumeText) {
          showToast("Please provide your resume text first", "error");
          return;
        }

        if (!state.apiConnected) {
          showToast("Backend server is not connected", "error");
          return;
        }

        try {
          const response = await makeAPICall("/api/chat/completions", {
            taskType: "hr",
            messages: [{
              role: "user",
              content: `Analyze this resume for ATS (Applicant Tracking System) compatibility:

${resumeText}

Provide an ATS compatibility score (0-100) and specific recommendations for improvement. 
Focus on formatting, keywords, section headers, and other ATS-friendly elements.

Respond in JSON format:
{
  "atsScore": [score],
  "recommendations": ["recommendation1", "recommendation2", ...]
}
`
            }]
          }, "POST");

          if (response.success) {
            const atsAnalysis = parseAIResponse(response.data.content);
            displayATSResults(atsAnalysis);
          } else {
            throw new Error("ATS analysis failed");
          }
        } catch (error) {
          console.error("ATS analysis error:", error);
          showToast("Failed to analyze ATS compatibility", "error");
        }
      }

      function displayATSResults(analysis) {
        const atsScore = analysis.atsScore || 75;
        state.resumeData.atsScore = atsScore;
        
        document.getElementById("atsScore").textContent = `${atsScore}%`;
        
        const recommendationsContainer = document.getElementById("atsRecommendations");
        if (analysis.recommendations && analysis.recommendations.length > 0) {
          recommendationsContainer.innerHTML = analysis.recommendations.map(rec => `
            <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 16px; margin-bottom: 12px; border-left: 4px solid var(--primary-color);">
              <p>${rec}</p>
            </div>
          `).join('');
        } else {
          recommendationsContainer.innerHTML = `
            <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 16px; border-left: 4px solid var(--primary-color);">
              <p>Your resume shows good ATS compatibility. Continue optimizing keywords for specific job descriptions.</p>
            </div>
          `;
        }
        
        document.getElementById("atsResults").style.display = "block";
      }

      // Interview Preparation Functions
      async function predictInterviewStages() {
        const companyName = document.getElementById("prepCompanyName").value.trim();
        const jobDesc = document.getElementById("interviewJobDesc").value.trim();
        const interviewType = document.getElementById("interviewType").value;

        if (!jobDesc) {
          showToast("Please provide a job description", "error");
          return;
        }

        if (!state.apiConnected) {
          showToast("Backend server is not connected", "error");
          return;
        }

        const btn = document.getElementById("predictBtn");
        btn.disabled = true;
        btn.innerHTML = '<div class="loading-spinner"></div> AI Predicting...';

        try {
          const response = await makeAPICall("/api/predict-stages", {
            jobDescription: jobDesc,
            companyName: companyName || "Company",
            interviewType: interviewType
          }, "POST");

          if (response.success) {
            const prediction = parseAIResponse(response.data.content);
            const stages = prediction.stages || createDefaultStages();
            displayInterviewStages(stages, companyName);
            showToast("AI interview stages predicted successfully!", "success");
          } else {
            throw new Error("Prediction failed");
          }
        } catch (error) {
          console.error("Prediction error:", error);
          const defaultStages = createDefaultStages();
          displayInterviewStages(defaultStages, companyName);
          showToast("Interview stages generated based on common patterns", "info");
        } finally {
          btn.disabled = false;
          btn.innerHTML = "🔮 Predict Interview Stages";
        }
      }

      function createDefaultStages() {
        return [
          {
            name: "Phone Screening",
            type: "screening",
            description: "Initial screening with HR to discuss background and basic qualifications",
            emoji: "📱",
          },
          {
            name: "Technical Round",
            type: "technical",
            description: "Technical assessment including coding challenges or technical discussions",
            emoji: "💻",
          },
          {
            name: "Behavioral Interview",
            type: "hr",
            description: "Behavioral questions focusing on culture fit and past experiences",
            emoji: "🤝",
          },
          {
            name: "Final Round",
            type: "final",
            description: "Final interview with senior leadership",
            emoji: "🎯",
          },
        ];
      }

      function displayInterviewStages(stages, companyName) {
        const container = document.getElementById("stagesContainer");
        container.innerHTML = stages.map((stage, index) => `
          <div class="stage-card" onclick="startStageInterview(${index}, '${companyName || 'Company'}')">
            <div class="stage-title">
              <span>${stage.emoji || "🎯"}</span>
              <span>${stage.name}</span>
            </div>
            <div class="stage-description">${stage.description}</div>
          </div>
        `).join('');

        state.interviewStages = stages;
        document.getElementById("interviewStages").style.display = "block";
      }

      function startStageInterview(stageIndex, companyName) {
        const stage = state.interviewStages[stageIndex];
        state.currentSession = {
          id: generateId(),
          stage: stage,
          company: companyName,
          type: "text",
          startTime: Date.now(),
          messages: [],
          responses: []
        };

        document.getElementById("textInterviewSession").style.display = "block";
        document.getElementById("currentStageTitle").textContent = `${stage.name} - ${companyName}`;
        document.getElementById("textInterviewTitle").textContent = `AI ${stage.name} Interview`;
        document.getElementById("textInterviewMessages").innerHTML = "";

        generateStageQuestion(stage, companyName);
      }

      function startTextInterviewSession() {
        const companyName = document.getElementById("prepCompanyName").value.trim() || "Company";
        const interviewType = document.getElementById("interviewType").value;
        
        const defaultStage = {
          name: "Practice Interview",
          type: interviewType,
          description: "General interview practice session"
        };

        state.currentSession = {
          id: generateId(),
          stage: defaultStage,
          company: companyName,
          type: "text",
          startTime: Date.now(),
          messages: [],
          responses: []
        };

        document.getElementById("textInterviewSession").style.display = "block";
        document.getElementById("currentStageTitle").textContent = `Practice Session - ${companyName}`;
        document.getElementById("textInterviewTitle").textContent = `AI Interview Practice`;
        document.getElementById("textInterviewMessages").innerHTML = "";

        generateStageQuestion(defaultStage, companyName);
      }

      async function generateStageQuestion(stage, companyName) {
        const jobDesc = document.getElementById("interviewJobDesc").value.trim();
        
        if (!state.apiConnected) {
          const fallbackQuestion = getFallbackQuestion(stage.type);
          addTextMessage("assistant", fallbackQuestion);
          return;
        }

        try {
          const response = await makeAPICall("/api/chat/completions", {
            taskType: stage.type === "technical" ? "coding" : "hr",
            messages: [{
              role: "user",
              content: `You are conducting a ${stage.name} interview for ${companyName}.
              
Job Description: ${jobDesc}

Generate a realistic, engaging interview question appropriate for this stage and role.
Make it specific and professional. Respond with just the question.`
            }]
          }, "POST");

          if (response.success) {
            addTextMessage("assistant", response.data.content);
            state.currentSession.messages.push({
              role: "assistant",
              content: response.data.content,
              timestamp: Date.now()
            });
          } else {
            throw new Error("Question generation failed");
          }
        } catch (error) {
          console.error("Question generation error:", error);
          const fallbackQuestion = getFallbackQuestion(stage.type);
          addTextMessage("assistant", fallbackQuestion);
        }
      }

      function getFallbackQuestion(stageType) {
        const fallbackQuestions = {
          screening: "Tell me about yourself and why you're interested in this position.",
          technical: "Can you walk me through your approach to solving a complex technical problem?",
          hr: "Describe a challenging situation you faced at work and how you handled it.",
          behavioral: "Give me an example of a time when you had to work with a difficult team member.",
          final: "Why do you want to work for our company, and what value would you bring to our team?",
          general: "Tell me about yourself and what makes you a good fit for this role."
        };

        return fallbackQuestions[stageType] || fallbackQuestions.general;
      }

      function addTextMessage(sender, content) {
        const messagesContainer = document.getElementById("textInterviewMessages");
        const messageDiv = document.createElement("div");
        messageDiv.className = `message ${sender}`;
        messageDiv.textContent = content;
        messagesContainer.appendChild(messageDiv);
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
      }

      async function sendTextInterviewResponse() {
        const input = document.getElementById("textInterviewInput");
        const response = input.value.trim();

        if (!response) return;

        const sendBtn = document.getElementById("sendTextBtn");
        sendBtn.disabled = true;

        addTextMessage("user", response);
        input.value = "";

        // Store response
        state.currentSession.responses.push({
          question: state.currentSession.messages[state.currentSession.messages.length - 1]?.content || "",
          response: response,
          timestamp: Date.now()
        });

        state.currentSession.messages.push({
          role: "user",
          content: response,
          timestamp: Date.now()
        });

        // Generate follow-up or end session
        if (state.currentSession.responses.length < 3) {
          setTimeout(async () => {
            await generateFollowUp();
            sendBtn.disabled = false;
          }, 1000);
        } else {
          setTimeout(() => {
            endTextSession();
            sendBtn.disabled = false;
          }, 1000);
        }
      }

      async function generateFollowUp() {
        if (!state.apiConnected) {
          addTextMessage("assistant", "Thank you for that answer. Can you tell me more about your experience with similar challenges?");
          return;
        }

        try {
          const conversationContext = state.currentSession.messages.slice(-4);
          const response = await makeAPICall("/api/chat/completions", {
            taskType: state.currentSession.stage.type === "technical" ? "coding" : "hr",
            messages: [{
              role: "user",
              content: `You are conducting a ${state.currentSession.stage.name} interview. 
              
Based on this conversation, generate an appropriate follow-up question:
${conversationContext.map(msg => `${msg.role}: ${msg.content}`).join('\n')}

Generate a natural follow-up question. Respond with just the question.`
            }]
          }, "POST");

          if (response.success) {
            addTextMessage("assistant", response.data.content);
            state.currentSession.messages.push({
              role: "assistant",
              content: response.data.content,
              timestamp: Date.now()
            });
          } else {
            throw new Error("Follow-up generation failed");
          }
        } catch (error) {
          console.error("Follow-up generation error:", error);
          addTextMessage("assistant", "Thank you for that answer. Can you provide a specific example from your experience?");
        }
      }

      function endTextSession() {
        if (!state.currentSession) return;

        // Calculate session metrics
        const duration = Date.now() - state.currentSession.startTime;
        const overallScore = 70 + Math.random() * 25; // Simulate scoring
        
        const sessionRecord = {
          id: state.currentSession.id,
          company: state.currentSession.company,
          type: "text",
          stage: state.currentSession.stage.name,
          date: Date.now(),
          duration: duration,
          overallScore: Math.round(overallScore),
          responsesCount: state.currentSession.responses.length,
          messages: state.currentSession.messages
        };

        state.sessions.push(sessionRecord);
        state.analytics.totalSessions = state.sessions.length;
        
        // Update analytics
        updateAnalytics(sessionRecord);

        document.getElementById("textInterviewSession").style.display = "none";
        showToast("Interview session completed successfully", "success");
        
        // Update dashboard
        updateDashboardMetrics();
      }

      function updateAnalytics(session) {
        // Update average confidence
        const sessionScores = state.sessions.map(s => s.overallScore || 0).filter(s => s > 0);
        if (sessionScores.length > 0) {
          state.analytics.averageConfidence = Math.round(
            sessionScores.reduce((a, b) => a + b, 0) / sessionScores.length
          );
        }
      }

      // Progress Dashboard Functions
      function updateProgressDashboard() {
        document.getElementById("totalSessions").textContent = state.analytics.totalSessions;
        document.getElementById("avgConfidence").textContent = 
          state.analytics.averageConfidence > 0 ? `${state.analytics.averageConfidence}%` : "--";
        
        // Calculate improvement rate
        const improvementRate = calculateImprovementRate();
        document.getElementById("improvementRate").textContent = 
          improvementRate > 0 ? `+${improvementRate}%` : "--";
        
        document.getElementById("goalsCompleted").textContent = 
          state.analytics.goals.filter(g => g.completed).length;

        updateProgressCharts();
        updateInterviewHistory();
      }

      function calculateImprovementRate() {
        if (state.sessions.length < 2) return 0;
        
        const recentSessions = state.sessions.slice(-5);
        const oldSessions = state.sessions.slice(0, -5);
        
        if (oldSessions.length === 0) return 0;
        
        const recentAvg = recentSessions.reduce((a, b) => a + (b.overallScore || 0), 0) / recentSessions.length;
        const oldAvg = oldSessions.reduce((a, b) => a + (b.overallScore || 0), 0) / oldSessions.length;
        
        return Math.round(((recentAvg - oldAvg) / oldAvg) * 100);
      }

      function updateProgressCharts() {
        createPerformanceTrendChart();
        createSkillDevelopmentChart();
      }

      function createPerformanceTrendChart() {
        const ctx = document.getElementById("performanceTrendChart").getContext("2d");
        
        if (window.performanceTrendChartInstance) {
          window.performanceTrendChartInstance.destroy();
        }

        const sessions = state.sessions.slice(-10); // Last 10 sessions
        const labels = sessions.map((_, index) => `Session ${index + 1}`);
        const scores = sessions.map(s => s.overallScore || 0);

        window.performanceTrendChartInstance = new Chart(ctx, {
          type: "line",
          data: {
            labels: labels,
            datasets: [{
              label: "Performance Score",
              data: scores,
              borderColor: "rgba(37, 99, 235, 1)",
              backgroundColor: "rgba(37, 99, 235, 0.1)",
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: true,
                max: 100
              }
            },
            plugins: {
              legend: {
                position: "bottom"
              }
            }
          }
        });
      }

      function createSkillDevelopmentChart() {
        const ctx = document.getElementById("skillDevelopmentChart").getContext("2d");
        
        if (window.skillDevelopmentChartInstance) {
          window.skillDevelopmentChartInstance.destroy();
        }

        // Simulate skill development data
        const skills = ["Communication", "Technical", "Confidence", "Problem Solving"];
        const currentLevels = skills.map(() => 60 + Math.random() * 35);

        window.skillDevelopmentChartInstance = new Chart(ctx, {
          type: "radar",
          data: {
            labels: skills,
            datasets: [{
              label: "Current Level",
              data: currentLevels,
              backgroundColor: "rgba(37, 99, 235, 0.2)",
              borderColor: "rgba(37, 99, 235, 1)",
              pointBackgroundColor: "rgba(37, 99, 235, 1)"
            }]
          },
          options: {
            responsive: true,
            scales: {
              r: {
                beginAtZero: true,
                max: 100
              }
            },
            plugins: {
              legend: {
                position: "bottom"
              }
            }
          }
        });
      }

      function updateInterviewHistory() {
        const historyContainer = document.getElementById("interviewHistory");
        
        if (state.sessions.length === 0) {
          historyContainer.innerHTML = `
            <p style="color: var(--text-secondary); text-align: center; padding: 40px;">
              Complete interview sessions will appear here with detailed analytics.
            </p>
          `;
          return;
        }

        const recentSessions = state.sessions.slice().reverse();
        historyContainer.innerHTML = recentSessions.map(session => `
          <div class="session-item" onclick="viewSessionDetails('${session.id}')">
            <div class="session-header">
              <div>
                <div class="session-company">${session.company || 'Practice Session'}</div>
                <div style="font-size: 0.9rem; color: var(--text-secondary);">${session.stage || session.type}</div>
              </div>
              <div class="session-date">${formatDate(session.date)}</div>
            </div>
            <div class="session-stats">
              <div class="session-stat">
                <div class="session-stat-value">${session.overallScore || '--'}%</div>
                <div class="session-stat-label">Score</div>
              </div>
              <div class="session-stat">
                <div class="session-stat-value">${session.responsesCount || '--'}</div>
                <div class="session-stat-label">Questions</div>
              </div>
              <div class="session-stat">
                <div class="session-stat-value">${Math.round((session.duration || 0) / 60000)}m</div>
                <div class="session-stat-label">Duration</div>
              </div>
            </div>
          </div>
        `).join('');
      }

      function viewSessionDetails(sessionId) {
        const session = state.sessions.find(s => s.id === sessionId);
        if (!session) return;

        // Create a modal or detailed view (simplified for now)
        showToast(`Session details for ${session.company}: ${session.overallScore}% score`, "info");
      }

      function addGoal() {
        const goalInput = document.getElementById("newGoal");
        const goalText = goalInput.value.trim();
        
        if (!goalText) {
          showToast("Please enter a goal", "error");
          return;
        }

        const goal = {
          id: generateId(),
          text: goalText,
          createdAt: Date.now(),
          completed: false
        };

        state.analytics.goals.push(goal);
        goalInput.value = "";
        updateGoalsList();
        showToast("Goal added successfully", "success");
      }

      function updateGoalsList() {
        const goalsContainer = document.getElementById("activeGoals");
        
        if (state.analytics.goals.length === 0) {
          goalsContainer.innerHTML = '<p style="color: var(--text-secondary);">No goals set yet. Add your first goal!</p>';
          return;
        }

        goalsContainer.innerHTML = state.analytics.goals.map(goal => `
          <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; background: var(--bg-tertiary); border-radius: var(--radius-md); margin-bottom: 8px; ${goal.completed ? 'opacity: 0.6;' : ''}">
            <div>
              <span style="text-decoration: ${goal.completed ? 'line-through' : 'none'};">${goal.text}</span>
            </div>
            <button onclick="toggleGoal('${goal.id}')" style="background: none; border: none; cursor: pointer; font-size: 1.2rem;">
              ${goal.completed ? '✅' : '⭕'}
            </button>
          </div>
        `).join('');
      }

      function toggleGoal(goalId) {
        const goal = state.analytics.goals.find(g => g.id === goalId);
        if (goal) {
          goal.completed = !goal.completed;
          updateGoalsList();
          
          // Update dashboard metric
          document.getElementById("goalsCompleted").textContent = 
            state.analytics.goals.filter(g => g.completed).length;
        }
      }

      // AI Insights Functions
      function updateAIInsights() {
        if (state.sessions.length === 0) {
          showPlaceholderInsights();
          return;
        }

        analyzePersonalityTraits();
        analyzeCommunicationPatterns();
        updateConfidenceTrend();
      }

      function showPlaceholderInsights() {
        document.getElementById("personalityType").textContent = "--";
        document.getElementById("communicationStyle").textContent = "--";
        document.getElementById("industryReadiness").textContent = "--";
        document.getElementById("stressLevel").textContent = "--";

        const placeholderText = "Complete interview sessions to generate AI insights.";
        document.getElementById("personalityInsights").innerHTML = `<p style="color: var(--text-secondary); text-align: center;">${placeholderText}</p>`;
        document.getElementById("fillerWords").textContent = "No data available";
        document.getElementById("speechPace").textContent = "No data available";
        document.getElementById("clarityScore").textContent = "No data available";
      }

      function analyzePersonalityTraits() {
        // Simulate personality analysis based on interview responses
        const traits = ["Openness", "Conscientiousness", "Extraversion", "Agreeableness", "Neuroticism"];
        const dominantTrait = traits[Math.floor(Math.random() * traits.length)];
        
        document.getElementById("personalityType").textContent = dominantTrait;
        
        // Create personality chart
        createPersonalityChart();
        
        // Generate personality insights
        const insights = generatePersonalityInsights(dominantTrait);
        document.getElementById("personalityInsights").innerHTML = insights;
      }

      function createPersonalityChart() {
        const ctx = document.getElementById("personalityChart").getContext("2d");
        
        if (window.personalityChartInstance) {
          window.personalityChartInstance.destroy();
        }

        const traits = ["Openness", "Conscientiousness", "Extraversion", "Agreeableness", "Neuroticism"];
        const scores = traits.map(() => 40 + Math.random() * 50);

        window.personalityChartInstance = new Chart(ctx, {
          type: "radar",
          data: {
            labels: traits,
            datasets: [{
              label: "Your Profile",
              data: scores,
              backgroundColor: "rgba(139, 92, 246, 0.2)",
              borderColor: "rgba(139, 92, 246, 1)",
              pointBackgroundColor: "rgba(139, 92, 246, 1)"
            }]
          },
          options: {
            responsive: true,
            scales: {
              r: {
                beginAtZero: true,
                max: 100
              }
            },
            plugins: {
              legend: {
                position: "bottom"
              }
            }
          }
        });
      }

      function generatePersonalityInsights(dominantTrait) {
        const insights = {
          "Openness": "You demonstrate high curiosity and willingness to explore new ideas. This is valuable for creative problem-solving roles.",
          "Conscientiousness": "You show strong attention to detail and organizational skills. This suggests reliability in structured environments.",
          "Extraversion": "You appear comfortable with social interaction and communication. This is beneficial for team-oriented roles.",
          "Agreeableness": "You demonstrate cooperation and empathy in your responses. This indicates strong collaboration potential.",
          "Neuroticism": "Your responses suggest varying stress responses. Consider stress management techniques for challenging situations."
        };

        return `
          <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 20px; margin-top: 16px;">
            <h5 style="margin-bottom: 12px;">Dominant Trait: ${dominantTrait}</h5>
            <p style="color: var(--text-secondary); line-height: 1.6;">${insights[dominantTrait]}</p>
          </div>
        `;
      }

      function analyzeCommunicationPatterns() {
        // Simulate communication analysis
        const fillerWordsCount = Math.floor(Math.random() * 15);
        const speechPace = ["Optimal", "Too Fast", "Too Slow"][Math.floor(Math.random() * 3)];
        const clarityScore = 70 + Math.random() * 25;

        document.getElementById("communicationStyle").textContent = "Analytical";
        document.getElementById("fillerWords").textContent = `${fillerWordsCount} per minute`;
        document.getElementById("speechPace").textContent = speechPace;
        document.getElementById("clarityScore").textContent = `${Math.round(clarityScore)}%`;
      }

      function updateConfidenceTrend() {
        const ctx = document.getElementById("confidenceTrendChart").getContext("2d");
        
        if (window.confidenceTrendChartInstance) {
          window.confidenceTrendChartInstance.destroy();
        }

        const sessions = state.sessions.slice(-10);
        const labels = sessions.map((_, index) => `Session ${index + 1}`);
        const confidenceScores = sessions.map(s => (s.overallScore || 0) + Math.random() * 10 - 5);

        window.confidenceTrendChartInstance = new Chart(ctx, {
          type: "line",
          data: {
            labels: labels,
            datasets: [{
              label: "Confidence Level",
              data: confidenceScores,
              borderColor: "rgba(16, 185, 129, 1)",
              backgroundColor: "rgba(16, 185, 129, 0.1)",
              tension: 0.4
            }]
          },
          options: {
            responsive: true,
            scales: {
              y: {
                beginAtZero: true,
                max: 100
              }
            },
            plugins: {
              legend: {
                position: "bottom"
              }
            }
          }
        });

        // Update other metrics
        document.getElementById("industryReadiness").textContent = `${Math.round(70 + Math.random() * 25)}%`;
        document.getElementById("stressLevel").textContent = "Low";
      }

      // Resume Builder Functions
      async function generateResumeTemplate() {
        const targetRole = document.getElementById("targetRole").value.trim();
        const targetIndustry = document.getElementById("targetIndustry").value;
        const resumeTemplate = document.getElementById("resumeTemplate").value;

        if (!targetRole) {
          showToast("Please enter a target role", "error");
          return;
        }

        if (!state.apiConnected) {
          showToast("Backend server is not connected", "error");
          return;
        }

        try {
          const response = await makeAPICall("/api/chat/completions", {
            taskType: "hr",
            messages: [{
              role: "user",
              content: `Generate a professional resume template for:
              
Target Role: ${targetRole}
Industry: ${targetIndustry}
Template Style: ${resumeTemplate}

Create a complete resume template with placeholders for personal information, professional summary, experience, skills, and education. Make it industry-appropriate and ATS-friendly.

Format it as plain text that can be easily edited.`
            }]
          }, "POST");

          if (response.success) {
            document.getElementById("resumeBuilder").value = response.data.content;
            showToast("Resume template generated successfully", "success");
          } else {
            throw new Error("Template generation failed");
          }
        } catch (error) {
          console.error("Template generation error:", error);
          showToast("Failed to generate resume template", "error");
        }
      }

      async function optimizeForATS() {
        const resumeContent = document.getElementById("resumeBuilder").value.trim();
        
        if (!resumeContent) {
          showToast("Please generate or paste resume content first", "error");
          return;
        }

        if (!state.apiConnected) {
          showToast("Backend server is not connected", "error");
          return;
        }

        try {
          const response = await makeAPICall("/api/chat/completions", {
            taskType: "hr",
            messages: [{
              role: "user",
              content: `Optimize this resume for ATS (Applicant Tracking Systems):

${resumeContent}

Make it ATS-friendly by:
1. Using standard section headers
2. Including relevant keywords
3. Using simple formatting
4. Ensuring proper structure
5. Adding quantifiable achievements

Return the optimized resume.`
            }]
          }, "POST");

          if (response.success) {
            document.getElementById("resumeBuilder").value = response.data.content;
            showToast("Resume optimized for ATS", "success");
          } else {
            throw new Error("ATS optimization failed");
          }
        } catch (error) {
          console.error("ATS optimization error:", error);
          showToast("Failed to optimize resume for ATS", "error");
        }
      }

      async function createMultipleVersions() {
        const baseResume = document.getElementById("resumeBuilder").value.trim();
        
        if (!baseResume) {
          showToast("Please generate base resume content first", "error");
          return;
        }

        if (!state.apiConnected) {
          showToast("Backend server is not connected", "error");
          return;
        }

        try {
          const versions = ["Technical Focus", "Leadership Focus", "Creative Focus"];
          const resumeVersions = [];

          for (const version of versions) {
            const response = await makeAPICall("/api/chat/completions", {
              taskType: "hr",
              messages: [{
                role: "user",
                content: `Create a ${version} version of this resume:

${baseResume}

Tailor it specifically for ${version.toLowerCase()} roles while maintaining the core content.`
              }]
            }, "POST");

            if (response.success) {
              resumeVersions.push({
                name: version,
                content: response.data.content
              });
            }
          }

          state.resumeData.versions = resumeVersions;
          displayResumeVersions(resumeVersions);
          showToast(`${resumeVersions.length} resume versions created`, "success");

        } catch (error) {
          console.error("Version creation error:", error);
          showToast("Failed to create resume versions", "error");
        }
      }

      function displayResumeVersions(versions) {
        const container = document.getElementById("versionsList");
        
        container.innerHTML = versions.map((version, index) => `
          <div style="border: 1px solid var(--border-light); border-radius: var(--radius-lg); padding: 20px; margin-bottom: 16px;">
            <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 12px;">
              <h4>${version.name}</h4>
              <div>
                <button class="btn btn-secondary" onclick="viewVersion(${index})" style="font-size: 0.8rem; padding: 6px 12px;">View</button>
                <button class="btn btn-secondary" onclick="useVersion(${index})" style="font-size: 0.8rem; padding: 6px 12px;">Use</button>
              </div>
            </div>
            <p style="color: var(--text-secondary); font-size: 0.9rem;">${version.content.substring(0, 200)}...</p>
          </div>
        `).join('');

        document.getElementById("resumeVersions").style.display = "block";
      }

      function viewVersion(index) {
        const version = state.resumeData.versions[index];
        if (version) {
          // Create a modal or new window to view full version
          const newWindow = window.open('', '_blank');
          newWindow.document.write(`
            <html>
              <head><title>${version.name} Resume</title></head>
              <body style="font-family: Arial, sans-serif; padding: 20px; line-height: 1.6;">
                <h1>${version.name}</h1>
                <pre style="white-space: pre-wrap;">${version.content}</pre>
              </body>
            </html>
          `);
        }
      }

      function useVersion(index) {
        const version = state.resumeData.versions[index];
        if (version) {
          document.getElementById("resumeBuilder").value = version.content;
          showToast(`Now using ${version.name} version`, "success");
        }
      }

      async function testResumeVersions() {
        if (state.resumeData.versions.length === 0) {
          showToast("Please create resume versions first", "error");
          return;
        }

        const jobDesc = document.getElementById("jobDescription")?.value.trim();
        if (!jobDesc) {
          showToast("Please provide a job description for A/B testing", "error");
          return;
        }

        if (!state.apiConnected) {
          showToast("Backend server is not connected", "error");
          return;
        }

        try {
          const testResults = [];

          for (const version of state.resumeData.versions) {
            const response = await makeAPICall("/api/analyze-resume", {
              resumeText: version.content,
              jobDescription: jobDesc
            }, "POST");

            if (response.success) {
              const analysis = parseAIResponse(response.data.content);
              testResults.push({
                name: version.name,
                score: analysis.matchPercentage || 75
              });
            }
          }

          displayTestResults(testResults);
          showToast("A/B testing completed", "success");

        } catch (error) {
          console.error("A/B testing error:", error);
          showToast("Failed to test resume versions", "error");
        }
      }

      function displayTestResults(results) {
        const bestVersion = results.reduce((prev, current) => 
          (prev.score > current.score) ? prev : current);

        const resultsHTML = results.map(result => `
          <div style="display: flex; justify-content: space-between; align-items: center; padding: 12px; background: var(--bg-tertiary); border-radius: var(--radius-md); margin-bottom: 8px; ${result.name === bestVersion.name ? 'border-left: 4px solid var(--accent-color);' : ''}">
            <span>${result.name}</span>
            <span style="font-weight: 600; color: var(--primary-color);">${result.score}%</span>
          </div>
        `).join('');

        const container = document.getElementById("versionsList");
        container.innerHTML = `
          <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 20px; margin-bottom: 20px;">
            <h4 style="margin-bottom: 16px;">A/B Test Results</h4>
            <p style="color: var(--text-secondary); margin-bottom: 16px;">Best performing version: <strong>${bestVersion.name}</strong></p>
            ${resultsHTML}
          </div>
        ` + container.innerHTML;
      }

      function downloadResume() {
        const resumeContent = document.getElementById("resumeBuilder").value.trim();
        
        if (!resumeContent) {
          showToast("No resume content to download", "error");
          return;
        }

        const blob = new Blob([resumeContent], { type: "text/plain" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "resume.txt";
        a.click();
        URL.revokeObjectURL(url);
        
        showToast("Resume downloaded successfully", "success");
      }

      // Career Coach Functions
      async function generateCareerRoadmap() {
        const currentRole = document.getElementById("currentRole").value.trim();
        const careerGoals = document.getElementById("careerGoals").value.trim();
        const targetIndustry = document.getElementById("coachTargetIndustry").value;

        if (!currentRole || !careerGoals) {
          showToast("Please provide current role and career goals", "error");
          return;
        }

        if (!state.apiConnected) {
          showToast("Backend server is not connected", "error");
          return;
        }

        try {
          const response = await makeAPICall("/api/chat/completions", {
            taskType: "hr",
            messages: [{
              role: "user",
              content: `Create a personalized career roadmap:

Current Role: ${currentRole}
Career Goals: ${careerGoals}
Target Industry: ${targetIndustry}

Generate a detailed career roadmap with:
1. Short-term goals (6-12 months)
2. Medium-term goals (1-3 years)
3. Long-term goals (3-5 years)
4. Required skills and certifications
5. Recommended next steps
6. Potential career paths

Make it actionable and specific.`
            }]
          }, "POST");

          if (response.success) {
            const roadmapContent = document.getElementById("roadmapContent");
            roadmapContent.innerHTML = `
              <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 24px; line-height: 1.6;">
                <pre style="white-space: pre-wrap; font-family: inherit;">${response.data.content}</pre>
              </div>
            `;
            
            state.careerData.roadmap = response.data.content;
            document.getElementById("careerRoadmap").style.display = "block";
            showToast("Career roadmap generated successfully", "success");
          } else {
            throw new Error("Roadmap generation failed");
          }
        } catch (error) {
          console.error("Roadmap generation error:", error);
          showToast("Failed to generate career roadmap", "error");
        }
      }

      async function analyzeMarketTrends() {
        const targetIndustry = document.getElementById("coachTargetIndustry").value;

        if (!state.apiConnected) {
          showToast("Backend server is not connected", "error");
          return;
        }

        try {
          const response = await makeAPICall("/api/chat/completions", {
            taskType: "hr",
            messages: [{
              role: "user",
              content: `Analyze current market trends for the ${targetIndustry} industry:

Provide insights on:
1. Growing job roles and opportunities
2. Emerging technologies and skills in demand
3. Salary trends and market outlook
4. Remote work impact
5. Key companies and employers to watch
6. Recommended skills to develop

Keep it current and actionable for job seekers.`
            }]
          }, "POST");

          if (response.success) {
            const trendsContent = document.getElementById("trendsContent");
            trendsContent.innerHTML = `
              <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 20px; margin-top: 16px; line-height: 1.6;">
                <pre style="white-space: pre-wrap; font-family: inherit;">${response.data.content}</pre>
              </div>
            `;
            
            state.careerData.marketTrends[targetIndustry] = response.data.content;
            showToast("Market trends analysis completed", "success");
          } else {
            throw new Error("Market analysis failed");
          }
        } catch (error) {
          console.error("Market analysis error:", error);
          showToast("Failed to analyze market trends", "error");
        }
      }

      async function analyzeSkillGaps() {
        const currentRole = document.getElementById("currentRole").value.trim();
        const careerGoals = document.getElementById("careerGoals").value.trim();
        const targetIndustry = document.getElementById("coachTargetIndustry").value;

        if (!currentRole || !careerGoals) {
          showToast("Please provide current role and career goals first", "error");
          return;
        }

        if (!state.apiConnected) {
          showToast("Backend server is not connected", "error");
          return;
        }

        try {
          const response = await makeAPICall("/api/chat/completions", {
            taskType: "hr",
            messages: [{
              role: "user",
              content: `Analyze skill gaps for career transition:

Current Role: ${currentRole}
Career Goals: ${careerGoals}
Target Industry: ${targetIndustry}

Identify:
1. Skills currently possessed (based on current role)
2. Skills needed for target career
3. Critical skill gaps to address
4. Recommended learning resources
5. Timeline for skill development
6. Priority order for skill acquisition

Be specific and actionable.`
            }]
          }, "POST");

          if (response.success) {
            const skillGapContent = document.getElementById("skillGapContent");
            skillGapContent.innerHTML = `
              <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 20px; margin-top: 16px; line-height: 1.6;">
                <pre style="white-space: pre-wrap; font-family: inherit;">${response.data.content}</pre>
              </div>
            `;
            
            showToast("Skill gap analysis completed", "success");
          } else {
            throw new Error("Skill gap analysis failed");
          }
        } catch (error) {
          console.error("Skill gap analysis error:", error);
          showToast("Failed to analyze skill gaps", "error");
        }
      }

      async function findOpportunities() {
        const currentRole = document.getElementById("currentRole").value.trim();
        const careerGoals = document.getElementById("careerGoals").value.trim();
        const targetIndustry = document.getElementById("coachTargetIndustry").value;

        if (!currentRole) {
          showToast("Please provide your current role", "error");
          return;
        }

        if (!state.apiConnected) {
          showToast("Backend server is not connected", "error");
          return;
        }

        try {
          const response = await makeAPICall("/api/chat/completions", {
            taskType: "hr",
            messages: [{
              role: "user",
              content: `Find career opportunities and recommendations:

Current Role: ${currentRole}
Career Goals: ${careerGoals}
Target Industry: ${targetIndustry}

Provide:
1. Recommended job titles to target
2. Types of companies to consider
3. Networking strategies
4. Job search platforms to use
5. Application strategies
6. Interview preparation focus areas

Be practical and actionable for immediate job search.`
            }]
          }, "POST");

          if (response.success) {
            const opportunitiesContent = document.getElementById("opportunitiesContent");
            opportunitiesContent.innerHTML = `
              <div style="background: var(--bg-tertiary); border-radius: var(--radius-lg); padding: 20px; margin-top: 16px; line-height: 1.6;">
                <pre style="white-space: pre-wrap; font-family: inherit;">${response.data.content}</pre>
              </div>
            `;
            
            showToast("Opportunity recommendations generated", "success");
          } else {
            throw new Error("Opportunity finding failed");
          }
        } catch (error) {
          console.error("Opportunity finding error:", error);
          showToast("Failed to find opportunities", "error");
        }
      }

      // Testimonials Functions
      async function loadTestimonials() {
        if (!state.apiConnected) {
          displaySampleTestimonials();
          return;
        }

        try {
          // In a real app, this would load testimonials from a database
          // For now, we'll generate sample ones
          displaySampleTestimonials();
          showToast("Success stories loaded", "success");
        } catch (error) {
          console.error("Testimonials loading error:", error);
          displaySampleTestimonials();
        }
      }

      function displaySampleTestimonials() {
        const testimonials = [
          {
            name: "Sarah Chen",
            role: "Software Engineer at Google",
            content: "Interview Copilot Pro helped me practice with AI-powered feedback. The video interview simulation was incredibly realistic and prepared me for the actual interview environment.",
            initial: "SC"
          },
          {
            name: "Michael Rodriguez",
            role: "Product Manager at Microsoft",
            content: "The career coaching feature provided personalized roadmap that helped me transition from engineering to product management. The skill gap analysis was spot-on.",
            initial: "MR"
          },
          {
            name: "Emily Johnson",
            role: "Data Scientist at Meta",
            content: "The behavioral analysis during video interviews helped me improve my body language and confidence. I landed my dream job after just 3 weeks of practice!",
            initial: "EJ"
          }
        ];

        const container = document.getElementById("testimonialsContainer");
        container.innerHTML = testimonials.map(testimonial => `
          <div class="testimonial-card">
            <div class="testimonial-quote">
              "${testimonial.content}"
            </div>
            <div class="testimonial-author">
              <div class="testimonial-avatar">${testimonial.initial}</div>
              <div class="testimonial-info">
                <h4>${testimonial.name}</h4>
                <p>${testimonial.role}</p>
              </div>
            </div>
          </div>
        `).join('');
      }

      function showTestimonialForm() {
        document.getElementById("testimonialForm").style.display = "block";
      }

      function hideTestimonialForm() {
        document.getElementById("testimonialForm").style.display = "none";
        document.getElementById("testimonialName").value = "";
        document.getElementById("testimonialRole").value = "";
        document.getElementById("testimonialContent").value = "";
      }

      function submitTestimonial() {
        const name = document.getElementById("testimonialName").value.trim();
        const role = document.getElementById("testimonialRole").value.trim();
        const content = document.getElementById("testimonialContent").value.trim();

        if (!name || !role || !content) {
          showToast("Please fill in all fields", "error");
          return;
        }

        // In a real app, this would submit to a backend
        showToast("Thank you for sharing your success story!", "success");
        hideTestimonialForm();

        // Add to display
        const container = document.getElementById("testimonialsContainer");
        const newTestimonial = `
          <div class="testimonial-card">
            <div class="testimonial-quote">"${content}"</div>
            <div class="testimonial-author">
              <div class="testimonial-avatar">${name.charAt(0).toUpperCase()}</div>
              <div class="testimonial-info">
                <h4>${name}</h4>
                <p>${role}</p>
              </div>
            </div>
          </div>
        `;
        container.innerHTML = newTestimonial + container.innerHTML;
      }

      // Download Functions
      function downloadAnalysis() {
        if (!state.resumeData.analysis) {
          showToast("No analysis data available", "error");
          return;
        }

        const reportData = {
          timestamp: new Date().toISOString(),
          analysis: state.resumeData.analysis,
          type: "resume_analysis",
          summary: "AI-generated resume analysis report",
        };

        downloadJSON(reportData, "ai-resume-analysis-report.json");
        showToast("Analysis report downloaded successfully", "success");
      }

      function downloadVideoAnalysis() {
        const session = state.sessions.find(s => s.type === "video");
        if (!session) {
          showToast("No video session data available", "error");
          return;
        }

        const reportData = {
          timestamp: new Date().toISOString(),
          sessionData: session,
          type: "video_analysis",
          summary: "AI-generated video interview analysis report",
        };

        downloadJSON(reportData, "video-interview-analysis.json");
        showToast("Video analysis downloaded successfully", "success");
      }

      function downloadJSON(data, filename) {
        const blob = new Blob([JSON.stringify(data, null, 2)], {
          type: "application/json",
        });

        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = filename;
        a.click();
        URL.revokeObjectURL(url);
      }

      // Utility Functions
      function startNewVideoSession() {
        document.getElementById("videoAnalysisResults").style.display = "none";
        document.getElementById("companyName").value = "";
        document.getElementById("videoJobDesc").value = "";
        showToast("Ready for new video interview session", "info");
      }

      // Event Listeners and Initialization
      document.addEventListener("DOMContentLoaded", function () {
        // Check API status
        checkAPIStatus();
        setInterval(checkAPIStatus, 30000);

        // Initialize voice recognition
        initializeVoiceRecognition();

        // Initialize dashboard
        updateDashboardMetrics();

        // Auto-resize textareas
        document.querySelectorAll(".text-area, .chat-input").forEach((textarea) => {
          textarea.addEventListener("input", function () {
            this.style.height = "auto";
            this.style.height = this.scrollHeight + "px";
          });
        });

        // Enter key handling for various inputs
        document.addEventListener("keydown", function (e) {
          if (e.key === "Enter" && !e.shiftKey) {
            const target = e.target;
            
            if (target.id === "videoInput") {
              e.preventDefault();
              sendVideoResponse();
            } else if (target.id === "textInterviewInput") {
              e.preventDefault();
              sendTextInterviewResponse();
            } else if (target.id === "newGoal") {
              e.preventDefault();
              addGoal();
            }
          }
        });

        // Close sidebar when clicking outside
        document.addEventListener("click", function (e) {
          const sidebar = document.getElementById("sidebar");
          const menuToggle = document.querySelector(".menu-toggle");
          
          if (window.innerWidth <= 768 && 
              !sidebar.contains(e.target) && 
              !menuToggle.contains(e.target) &&
              sidebar.classList.contains("active")) {
            sidebar.classList.remove("active");
          }
        });

        console.log("Interview Copilot Pro - Advanced Platform Initialized");
        console.log("API Base URL:", API_BASE_URL);
      });

      // Video response function
      function sendVideoResponse() {
        const input = document.getElementById("videoInput");
        const response = input.value.trim();
        if (!response) return;

        addVideoMessage("user", response);
        input.value = "";

        // Store response and potentially generate follow-up
        setTimeout(() => {
          addVideoMessage("assistant", "Thank you for that response. Can you elaborate on your experience with similar situations?");
        }, 1500);
      }

      // Responsive adjustments
      window.addEventListener("resize", function () {
        if (window.innerWidth > 768) {
          document.getElementById("sidebar").classList.remove("active");
        }
      });

      console.log("Interview Copilot Pro - Advanced AI Platform Ready");
    </script>
  </body>
</html>
